<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-09T10:41:46+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">dolphin</title><subtitle>让万物穿过自己，允许发生，无限可能！</subtitle><author><name>DempeZheng</name></author><entry><title type="html">2024年度总结:允许发生，无限可能</title><link href="http://localhost:4000/2024/01/03/Annual-Summary/" rel="alternate" type="text/html" title="2024年度总结:允许发生，无限可能" /><published>2024-01-03T00:00:00+08:00</published><updated>2024-01-03T00:00:00+08:00</updated><id>http://localhost:4000/2024/01/03/Annual-Summary</id><content type="html" xml:base="http://localhost:4000/2024/01/03/Annual-Summary/"><![CDATA[<h3 id="序言">序言</h3>

<p>2024年是我的本命年，虽然有一些小的曲折，但总体平稳度过。在经济下行的周期中，平稳本身就是一种幸福。今年，我也开始着手构建自己的人生框架，深信只要持续迭代，必定能穿越周期。</p>

\[\frac{\text{认知杠杆} \times \text{技术杠杆} \times \text{资本杠杆}}{\text{健康基石}} \rightarrow \text{系统复利} \rightarrow \text{自由人生}\]

<h3 id="一开篇回顾2024">一、开篇：回顾2024</h3>

<p>午夜的钟声敲响，朋友圈被烟火、告别与新年flag刷屏。有人在城市地标下仰望璀璨烟花，有人用长文向过去告别，也有人悄悄在心底埋下一颗改变的种子。每个人都在用自己的方式告别2024，迎接新的一年。2024，猝不及防的过去了。</p>

<p>当我剪辑24年年度Vlog，把一年的时光浓缩成几分钟的时，发现平淡的生活中仍然能有几个高亮的片段，而这些瞬间竟然构成了全部对生活的记忆。</p>

<p>这些被定格的瞬间，像是真实生活的证据。而那些高光片段，则像是生命河流上泛起的星光，是平凡生命中温暖的馈赠</p>

<div class="image-gallery">
    
    <figure class="thumbnail">
        <img src="/images/9f4d4f8224e6b4d28f93a9c09e0e4851.JPG" alt="南宁，香格里" class="gallery-image" data-large="/images/9f4d4f8224e6b4d28f93a9c09e0e4851.JPG" />
        <figcaption>南宁，香格里</figcaption>
    </figure>
    
    <figure class="thumbnail">
        <img src="/images/24cbb51c9362a4f20407c54baa06bacf.JPG" alt="南澳岛，花间里" class="gallery-image" data-large="/images/24cbb51c9362a4f20407c54baa06bacf.JPG" />
        <figcaption>南澳岛，花间里</figcaption>
    </figure>
    
    <figure class="thumbnail">
        <img src="/images/62eb0476d883bab1d183d1fef1b9a6a7.JPG" alt="初哥的假期" class="gallery-image" data-large="/images/62eb0476d883bab1d183d1fef1b9a6a7.JPG" />
        <figcaption>初哥的假期</figcaption>
    </figure>
    
    <figure class="thumbnail">
        <img src="/images/91d37abcbe16173bdcdb146b5cf89fff.JPG" alt="初哥的假期" class="gallery-image" data-large="/images/91d37abcbe16173bdcdb146b5cf89fff.JPG" />
        <figcaption>初哥的假期</figcaption>
    </figure>
    
</div>

<!-- 模态框（大图显示） -->
<div class="lightbox" id="lightbox">
    <div class="lightbox-content">
        <span class="close" onclick="imageGallery.closeLightbox()">×</span>
        <img id="lightbox-img" src="" alt="" />
        <div class="lightbox-caption" id="lightbox-caption"></div>
        <button class="lightbox-prev" onclick="imageGallery.changeImage(-1)">❮</button>
        <button class="lightbox-next" onclick="imageGallery.changeImage(1)">❯</button>
    </div>
</div>

<!-- JavaScript 放在底部 -->
<script src="/assets/js/lightbox.js"></script>

<script src="https://unpkg.com/heic2any/dist/heic2any.min.js"></script>

<ul>
  <li>7月，父母来广州游玩，母亲严重晕车，今年是父母第一次出远门，来到我居住的城市，带父母感受大城市的繁华，我也收获的了满足，陪伴是最好的礼物</li>
  <li>8月，初初的暑假快乐旅行时光，因为因工作缺席，错过了他眼中的美景，也略遗憾。</li>
  <li>9月，东莞松山湖的度假酒店，短暂的闲暇让紧绷的神经稍稍松弛。中秋假期去了南澳岛，住在海边的酒店，面朝大海，听海浪拍打着礁石，内心的浮躁逐渐平静。</li>
  <li>10月，国庆节安排了广西游，去了好多城市，贺州、南宁、崇左、玉林，南宁住了人生中最高的酒店（81层），拥有了一次特别的人生体验。</li>
</ul>

<p>然而，剥开这些闪光的片段，生活的底色依旧是日复一日的早出晚归。偶尔，下班后翻开朋友圈，看到别人镜头里捕捉到的晚霞，才恍然惊觉：美好就在眼前，而我总是错过。</p>

<p>我曾无数次幻想，能与过去的自己割席，换一种方式重新生活。但我始终没有迈出那一步。害怕未知的风险，害怕生活脱离轨道，害怕辜负家庭的期待与责任。</p>

<p>但其实，那些看似深层的恐惧，都指向一个现实的真相：我害怕失去稳定的收入来源，害怕无法为自己和家人提供一个安稳且有保障的生活。</p>

<p>所以，这些年来，赚钱成了我生活的主旋律。我努力工作，积攒存款，学习理财，期待通过被动收入，希望早日实现半躺平状态，告别朝九晚五的机械生活，轻装上阵，去探索人生更广阔的旷野，去体验更多未曾触及的风景，去追寻属于自己的意义和自由。</p>

<p><strong>生活是一条河流，我们无法与过去彻底割席，但每一个当下，都是通往未来的渡口。</strong></p>

<p><strong>Next：</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />旅游：去遇见自己，去看见不同的世界，多元人生体验</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />组织家庭旅行</li>
</ul>

<h3 id="二职业沉思">二、职业沉思</h3>

<blockquote>
  <p><strong>请更努力地将自己擅长和赖以谋生的事情做到极致。</strong></p>

  <p>这句话，始终是我职业生涯的座右铭。工作是我收入的基石，也是我实现半躺平的人生目标的的关键路径。然而，2024年的职业环境让我开始动摇。</p>
</blockquote>

<p>外部，宏观经济进入下行周期，互联网行业成为重灾区；内部，集团一体化、资源的倾斜和利益的重构，变化成为了职场的主旋律。今年，是我的本命年，也是格外动荡的一年。我试图拥抱变化，但结果并不总是令人满意，反而在内耗与迷茫中不断拉扯。</p>

<p>年底，我卖掉了一箱技术书籍。</p>

<p>这一箱书，像是某种隐喻：<strong>技术的价值正在加速贬值，过往的积累正在被时代的洪流无情稀释</strong>。</p>

<p>那些年我曾花费不菲购入的技术书，最终被二手平台以35元的价格收走。一箱书的价值，像是一面镜子，照出了技术人的尴尬处境：在AI迅猛发展的浪潮中，往的积累正在被时代的洪流无情稀释。</p>

<p>在AI技术迅猛发展的今天，技术从稀缺走向过剩，大多数技术岗位被流水线化，曾经被视为核心竞争力的技能，正在变成被随意替代的“标准件”。当技术的护城河被填平，35岁的职业危机就显得格外刺眼：</p>

<ul>
  <li><strong>技术贬值</strong>：大部分技术能力已经不再稀缺，价值逐渐被侵蚀。</li>
  <li><strong>人才年轻化</strong>：年轻、低成本的劳动力源源不断涌入市场，形成新的内卷。</li>
  <li><strong>企业国企化</strong>：组织文化趋于保守，重视流程和稳定，轻视个体创新与突破。</li>
</ul>

<p>在这样的背景下，绝大多数技术人被边缘化，失去了议价权，沦为流水线上的“工具人”。</p>

<p>当然，我曾试图通过技术进阶，卷赢那些技术能力更弱的人，以此在行业内多生存几年。 然而，这条路终究是越走越窄。
我终于明白：<strong>打工，永远无法实现真正的财富自由。</strong></p>

<ul>
  <li><strong>时间是有限的。</strong>就算互联网高薪，由于没有杠杆，你赚到的钱和时间是线性关系；</li>
  <li><strong>主动收入。</strong>无法躺着，一旦停止打工，收入也就断了；</li>
  <li><strong>无法积累资产。</strong>你所有的产出（知识产权）都是公司的，就算打工100年，你的积累都是别人的，你是在为别人而赚钱；</li>
  <li><strong>对平台的依赖。</strong>你的能力很大部分是平台给予的，脱离平台啥也不是。脱离公司，能赚到钱很难；</li>
  <li><strong>没有稀缺性。</strong>平台管理要求员工可替代，造成打工很难创造稀缺性，议价能力低；</li>
</ul>

<p>我将这些困惑讲给ChatGPT。它给出了一个答案：<strong>”跨越单一的维度，成为“懂商业的技术人”，</strong>我深以为然。</p>

<p>所谓“懂商业的技术人”，并不仅仅意味着掌握更多的编程语言，或者在新的技术框架上卷赢同行。而是要跳脱出纯粹的技术视角，理解技术与业务、市场之间的复杂关系：</p>

<ul>
  <li><strong>学会用商业思维去理解技术决策</strong>：不仅关注如何实现功能，更关注功能背后的商业价值。</li>
  <li><strong>培养闭环业务能力</strong>：独立思考，从需求到落地，形成完整的业务链条。</li>
  <li><strong>将技术作为工具，去解决商业问题</strong>：技术不是目的，而是通往目标的手段。</li>
</ul>

<p>技术的天花板是技术，商业的天花板是市场。技术是一个杠杆，当技术作为手段服务于商业，它的价值才能被最大化释放。</p>

<p><strong>Next</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />建立个人稳定的内核，拒绝内耗</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />拥抱AI，依托AI建立全栈能力，构建自己的产品</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />提升产品sense，做懂产品的技术人</li>
</ul>

<h3 id="三成长做一个优秀的人">三、成长：做一个优秀的人</h3>

<p>大学时，偶然听到一位同学的理想是“做一个优秀的人”。这句话简短，却深深触动了我。<strong>做一个优秀的人</strong>，意味着持续迭代自我，向上生长。</p>

<p>随着AI的迅速发展，<strong>人与人之间的技能差距逐渐缩小，然而认知差异却愈加显著</strong>。认知的不同，源于每个人输入输出系统的差异——获取、理解和表达信息的方式。不同的认知结构，决定了我们的思维深度和行动力。</p>

<p><strong>个人成长的输入输出系统：</strong></p>

<ul>
  <li><strong>信息输入（Input）</strong>：信息的质量直接决定认知的高度。我最近发现播客是一个高质量的输入渠道，尤其是在上下班的通勤时光，可以通过听播客提升认知。特别是《无人知晓》这档播客，相见恨晚。</li>
  <li><strong>内化（Internalization）</strong>：信息的转化过程是成长的核心。我通过Flomo记录灵感，通过Notion整理和提炼，逐步将所学知识内化为个人的认知体系。</li>
  <li><strong>知识输出（Output）</strong>：知识的掌握最终依赖于输出。今年，我的输出相对较少，尽管有想法，却缺乏实际的表达与创作。</li>
</ul>

<p>今年，我意识到自己在输入输出系统的建设上有所疏忽。工作中的不确定性消耗了我大量的精力，使我未能及时构建起有效的学习和成长体系。然而，年末的反思让我看清了问题所在，我决定在2025年重点优化信息输入和输出，结合目标管理框架，循序渐进地提升自己。</p>

<p><strong>Next：</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />系统框架：优化信息输入输出系统，</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />输入：打卡多邻国，学习英语</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />输出：坚持更新月刊，探索短视频内容创作</li>
</ul>

<h3 id="四健康将运动作为一种习惯">四、健康：将运动作为一种习惯</h3>

<p>今年，运动状态平稳，没有设定明确目标，偶尔进行跑步、骑行、散步和爬山。运动逐渐成为减压的重要途径，开始融入日常生活。虽然仍有提升空间，但整体保持稳定。</p>

<ul>
  <li>公司健康日跑步6公里，完成时间32分钟</li>
  <li>10公里，配速6分钟</li>
</ul>

<p>2025年，我将继续坚持，力争突破自我，保持进步。</p>

<p><strong>Next：</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />年跑量400km，挑战15公里跑</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />体重保持在65kg</li>
</ul>

<h3 id="五财务状况">五、财务状况</h3>

<ul>
  <li>今年，我将孩子从私立转到公立学校，节省了一笔可观的开支。</li>
  <li>今年差不多可以清空房贷，降低压力，但是经济不景气，房产缩水30+%。</li>
  <li>股市表现平平，英伟达赚了钱，中概也亏了些。</li>
</ul>

<p>国庆假期炒股热潮让我差点一时闹热冲进去。尽管理智上知道只是短期的市场泡沫，但是侥幸以为自己不会接最后一棒，然而，节后开盘第一天就套牢，现实告诉我，自以为是的常常是真的“韭菜”。</p>

<p>投资最大的敌人不是市场波动，而是内心的贪婪与自负。面对专业投资者的游刃有余，普通人的”幸存者偏差”不过是在用运气掩饰风险。</p>

<p><strong>投资不该是一场博弈，而是一场理性的筛选。</strong>相比于零和博弈，我更倾向于懒人投资模式：“懒人投资重点要看生意模式，跪着赚钱的不如站着赚钱的，站着赚钱不如躺着赚钱的。大部分的仓位应该放在那些你愿意像存款一样长期持有，不会倒闭的股票上。”</p>

<p>2025年的投资规划会更注重确定性：</p>

<ul>
  <li>七成仓位践行价值投资，以指数基金为主，享受低成本的Beta收益(指数基金是普通人能够获得的最好的投资方式了，可以非常低成本的获取到专业的投资经理的策略)</li>
  <li>两成仓位追求Alpha收益，满足适度的投机需求</li>
  <li>剩余时间专注投资理论学习，理解市场背后的运行逻辑</li>
</ul>

<p><strong>Next：</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />优化投资结构，降低股票占比，提升基金占比</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />对持有股票的公司要深度追踪，有自己的观点</li>
</ul>

<h3 id="六2025允许发生无限可能">六、2025：允许发生，无限可能</h3>

<p>“内耗”是我2024的关键词。它源于工作中的不确定性与压力，我常在患得患失中消耗自己。</p>

<p>幸运的是，年底听到孟岩《鱼不存在》这个播客，让我理解这个世界的本质是一个拥有无限可能的地方，内心的焦虑其实并不是真实存在。</p>

<blockquote>
  <p>她打破了界限，走出了困境，她看到了更广阔的世界，看到了世界的本质就是一个拥有无限可能的地方。所有类别皆是虚妄，而这也就是佛学中’空’真正的定义，即这个世界拥有无限可能。……我放弃了鱼，在长久的等待之后，我获得了自己追寻已久的东西，一句咒语，一个技巧，以及希望。这个世界向我承诺，我的生命中有美好的事物，不是因为我值得，不是因为我为之努力，而是因为它们和破坏与失去一样，是混乱的一部分，生是死的另一面，正如生长和腐烂互相依存。</p>

</blockquote>

<p>2025，打开自己内心的房子，让万物穿过自己，允许一切发生，允许发生是允许好的事情，也允许不好的事情：</p>

<ul>
  <li>允许全力投入工作，也允许探索新的职业机会。</li>
  <li>允许投资的波动，也允许尝试新的收入方式。</li>
  <li>允许探索自媒体的可能性，也允许没有即时回报。</li>
  <li>允许开源节流，也允许享受生活，去看看世界。</li>
</ul>

<p>有些看似当下不好的事情，也许正是我们人生路上路牌，指引我们走向更好的未来。万事万物的发生皆有利于我，允许自由发生，允许无限可能！</p>

<p>最后，祝愿2025能遇见更好的自己，附：2025年个人OKR：</p>
<div class="image-gallery">
    
    <figure class="thumbnail">
        <img src="/images/2025-OKR.png" alt="2025年OKR" class="gallery-image" data-large="/images/2025-OKR.png" />
        <figcaption>2025年OKR</figcaption>
    </figure>
    
</div>

<!-- 模态框（大图显示） -->
<div class="lightbox" id="lightbox">
    <div class="lightbox-content">
        <span class="close" onclick="imageGallery.closeLightbox()">×</span>
        <img id="lightbox-img" src="" alt="" />
        <div class="lightbox-caption" id="lightbox-caption"></div>
        <button class="lightbox-prev" onclick="imageGallery.changeImage(-1)">❮</button>
        <button class="lightbox-next" onclick="imageGallery.changeImage(1)">❯</button>
    </div>
</div>

<!-- JavaScript 放在底部 -->
<script src="/assets/js/lightbox.js"></script>

<script src="https://unpkg.com/heic2any/dist/heic2any.min.js"></script>]]></content><author><name>DempeZheng</name></author><category term="年度总结" /><summary type="html"><![CDATA[2024年，对于一位大龄大厂程序员来说，是充满挑战与成长的一年。本文总结了这一年在生活、投资、健康、成长等方面的深刻思考与规划，探讨了如何在压力中寻找内心的平衡，如何应对工作中的不确定性和压力，如何在经济下行周期中实现自己的突破。文章还分享了对未来一年的愿景，以及如何通过持续学习和自我迭代来跨越职业和生活中的周期性挑战。]]></summary></entry><entry><title type="html">00：开篇：越过淡季，森林和电</title><link href="http://localhost:4000/2023/12/30/00-Monthly-Journal/" rel="alternate" type="text/html" title="00：开篇：越过淡季，森林和电" /><published>2023-12-30T00:00:00+08:00</published><updated>2023-12-30T00:00:00+08:00</updated><id>http://localhost:4000/2023/12/30/00-Monthly-Journal</id><content type="html" xml:base="http://localhost:4000/2023/12/30/00-Monthly-Journal/"><![CDATA[<blockquote>
  <p><em>在愿望的最后一个季节，解散清晨还有黄昏 ——万青 · 《揪心的玩笑与漫长的白日梦》</em></p>
</blockquote>

<h1 id="一缘起与初心">一、缘起与初心</h1>

<h2 id="11缘起">1.1、缘起</h2>

<p>今天，我偶然读到一个朋友的博客，透过文字的窗缝，窥见他人光芒四射，勇敢热烈的生活，心里五味杂陈。羡慕他人跳出轨道，勇敢追寻热爱。同时懊悔自己困在生活的琐碎里面，畏畏缩缩，虚度光阴。</p>

<p>回想自己曾几度计划写博客，终究是半途而废。瞥见别人才思泉涌，文采斐然，终于下定决心，重拾文字，重新开始，用心生活。</p>

<h2 id="12初心">1.2、初心</h2>

<p>写博客，是希望通过输出倒逼输入，促使自己持续成长。在信息爆炸的时代，我们看似懂了许多道理，但真正表达时却常常词不达意。输出文字，既是对知识的巩固，也是对认知的深化。</p>

<p>如果还能因此结识一些同频的朋友，那再好不过。或许，这能为平淡的中年生活增添几分趣味。</p>

<p>至于未来的方向，现在还未清晰，也无妨。重要的是，从今天开始保持每月输出一篇月刊《森林和电》，记录生活，记录成长。</p>

<h1 id="二生活与成长">二、生活与成长</h1>

<h2 id="21播客上下班路途中的诗和远方">2.1、播客：上下班路途中的诗和远方</h2>

<p>十一月偶然开始听播客，从此一发不可收拾。听一群优秀的人侃侃而谈，聊科技，聊投资，也聊生活点滴。有人说，人是流动的，是身边人生活的加权平均。感谢互联网，让我们得以与遥远的优秀灵魂同处一个频道，让我得以与这些遥远的灵魂共鸣。通过播客，听到他们的真知灼见，感受他们的思想温度，听见不同的世界。借由他们的智慧与思考，照亮自己的成长之路。</p>

<p>住在郊区，每天往返两个小时的路程，我曾经用音乐填满这段孤独的时光。最初，歌曲的旋律带给我些许安慰，但渐渐地，它们成了空洞的背景音。自从开始听播客后，这段漫长的通勤竟成了一种馈赠。无论是清晨的阳光还是夜晚的车灯，都因为耳边的声音而变得丰富生动。</p>

<p>尤其喜欢《知行小酒馆》，它既关注投资，又深入生活，内容不仅有深度，还有温度。我希望未来能够涉猎更多领域，关注人文、哲学与历史，以思想滋养内心，抵抗生活中的平庸与疲惫。</p>

<h2 id="22投资经往自由的必由之路">2.2、投资：经往自由的必由之路</h2>

<p>早在多年前，我便意识到投资的重要性。由于没有足够的存粮，我始终未能全身心地投入其中。去年在A股的指数基金中，我曾经历过一次惨痛的“割韭菜”，而今年，则凭借美股的强势表现，年化收益率达到了10%以上。虽然这一收益远低于那些投资高手的翻倍成绩，但对我这个新手而言，已经非常满足了——毕竟，贪婪才是投资最致命的敌人。</p>

<p>投资是认知变现的最好方式之一。通过投资，开始关注世界，理解科技，思考商业模式。它的魅力在于，让人不断迭代认知，优化模型，管理风险。作为技术人，这样的逻辑推演与框架思考让我倍感亲切。</p>

<p>今年了解到纳斯达克指数20年的平均年化接近20%，让我震撼不已。美国经济的强大和制度的完善令人叹服，而大A股的停滞却更显得无力。正如付鹏大佬所言：“要去鱼多的地方捕鱼。”未来，我会将重心放在美股投资上，少参与大A的零和游戏。</p>

<p>对我而言，投资的真正魅力在于，它让我看见了从容生活的可能性。通过合理的资产配置，假如能在美股上实现10%的年化收益，那么我可以期待每年获得约20万的被动收入。20万足以覆盖日常开支，再加上一些副业收入，生活将变得更加从容自由。</p>

<p>想到这里，我对未来充满向往。而当下，最重要的事情，是尽快积累属于自己的第一桶金。</p>

<h2 id="23健康行于脚下归于内心">2.3、健康：行于脚下，归于内心</h2>

<p>我喜欢散步，散步是我日常的放松运动。闲步之间，可以任由思绪漫游，既无明确方向，业务目的，轻松而惬意。然而，散步对身体的帮助终究有限。尽管因为各种原因未能坚持下去，但我依然在努力调整自己的日程，并加大运动量。近期跑步10km，配速5’57”/km，算是近年来的十公里最快配速。运动真是一个好的馈赠，只要努力就有正向反馈。</p>

<p>当然，整体状态，还不够理想。但我相信，只要不断调整，运动会成为我生活的一部分，自律给我自由。</p>

<h2 id="24工作和自己和解">2.4、工作：和自己和解</h2>

<p>这些年，职业环境愈发严峻。无论是公司内部的合并调整，还是晋升通道的封闭，亦或是35岁的职业危机，都让我感受到强烈的不确定性。今年尤为艰难，责任重，回报少，年终的结果也未能如愿。尽管我劝慰自己，这些不快不过是人生长河中的一瞬，但当下的失落却如此真实。</p>

<p>十年来，我从未给自己一次喘息的机会，每次换工作都是无缝衔接，一直努力让自己成为一个优秀的人，一个职场规则下的优秀打工人。然而，今年，我终于触碰到职业的倦怠——每天清晨醒来，想到要去上班，感受到深深的沮丧。</p>

<p>工作一直在消耗我，为了生活和责任，一直被动承受，而我却从未停下来重新审视。</p>

<p>直到那一天，我听到这样一句话：</p>

<blockquote>
  <p>万事万物发生，皆有利于我。当你遇到一个难关，你可以把它想象成一个来自未来的人，这个人爱你，并且希望你能够做出很棒的事情，所以为了达到这个愿望，ta得把你往另一个方向推，而不是你目前在行进的这个方向，与你的预期不符。为了让你走向新的这个方向，ta必须用一些困难阻止你往原来的方向上去。这个时候你不应该去抗拒或者痛苦，相反，你应该敞开心扉，你应该去迎接新的方向，试图去发现ta想引导你新的道路是什么。</p>
</blockquote>

<p>因为这句话的鼓舞，开始重新审视工作与自己的关系，也让我学会与自己和解。</p>

<p>我明白了：工作仍然是实现财富自由的关键一环，但它不再是我的未来。我想要试试更多的可能性，开启人生的新篇章。工作不该仅仅是为了服从上级与规则，而要为自己的主线而努力；不仅要赢得他人的尊重，更要成就真实的自己。</p>

<h1 id="三复盘与思考">三、复盘与思考</h1>

<h2 id="31复盘差强人意">3.1、复盘：差强人意</h2>

<p>复盘23年的年度总结《2023，步履不停，穿越周期》，想要做好的事情依然还没做。算是碌碌无为的一年。</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />学好英语，具备进入外企能力【没有实际正反馈，无法坚持】</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />10km，配速 6’00”/km</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />初哥转广外，降低开支</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />保住工作</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />清空债务</li>
</ul>

<h2 id="32思考">3.2、思考：</h2>

<p>当然也不必苛责自己。下行的周期里面，能够保持平稳也算是幸福的，人应该知足。只是对于没做好的事情应该要反思：</p>

<ul>
  <li>目标周期太长，容易产生变数</li>
  <li>目标不够smart，不够聚焦，想的太多，做的太少</li>
  <li>内在驱动不足，目标达成没有正向激励</li>
</ul>

<h1 id="四1月执行计划表">四、1月执行计划表</h1>

<h2 id="41目标执行表">4.1、目标执行表</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><strong>健康</strong>
    <ul>
      <li>月跑量 ≥ 50km，平均配速 ≤ 6’00”/km</li>
      <li>月骑行公里数 ≥ 60km，累计时间 ≥ 4小时</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><strong>成长</strong>
    <ul>
      <li>听播客时长 ≥ 30小时，涵盖科技、商业和投资主题</li>
      <li>输出博客 ≥ 1篇，并发布至公众号</li>
      <li>学习Final Cut Pro，剪辑2024年度总结视频，并发布</li>
      <li>输出学习英语计划，并开始执行</li>
      <li>每周复盘时间使用情况，找出 2 个可优化点并执行</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><strong>投资</strong>
    <ul>
      <li>关注“AI第三阶段”趋势，并完成对应调仓，总资产≥121</li>
    </ul>
  </li>
</ul>

<h2 id="42完成奖励">4.2、完成奖励</h2>

<ul>
  <li>iphone 16 pro</li>
</ul>

<h1 id="五结语">五、结语</h1>

<p>生活是一场漫长的旅行，每一个微小的选择，都是我们与自己和解的桥梁。尤其是进入中年，责任与梦想交织，我们总在心底寻找那个最初的自己。每一次挣扎，都是迈向自由与幸福的步伐，哪怕它看似平凡，但却充满意义。</p>

<p>王小波说，人生是不断被锤的过程，而真正的意义，或许就在于被锤之后，依旧能保留一缕微光。面对挑战，我们无法改变世界，但可以选择如何面对它。每一滴雨水的落下，每一束阳光的照射，都是我们生命的一部分。没有捷径，唯有坚持与努力，才能将梦想一点一点拉近。</p>

<p>《森林与电》便是这微光的出口。我在自然与数字之间寻找平衡——既不迷失于信息洪流，也不放弃内心的独立。</p>

<p>愿这次出发成为习惯，愿我在复杂的世界中保持自我，在困境中依然怀抱期待与努力。</p>]]></content><author><name>DempeZheng</name></author><category term="月刊" /><summary type="html"><![CDATA[总结]]></summary></entry><entry><title type="html">2023，步履不停，穿越周期</title><link href="http://localhost:4000/2023/01/10/Endless-Steps/" rel="alternate" type="text/html" title="2023，步履不停，穿越周期" /><published>2023-01-10T00:00:00+08:00</published><updated>2023-01-10T00:00:00+08:00</updated><id>http://localhost:4000/2023/01/10/Endless-Steps</id><content type="html" xml:base="http://localhost:4000/2023/01/10/Endless-Steps/"><![CDATA[<h1 id="开篇回顾">开篇：回顾</h1>

<p>忽然，2023年过去了。回望这一年，能被记住的事情很少，也越来越能理解杨德昌电影《一一》里面，敏敏为什么突然就哭了。</p>

<p>23年是乏善可陈的一年。当然，23年不应该有太多奢望。</p>

<blockquote>
  <p>那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云<strong>。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。</strong>可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p>
</blockquote>

<ul>
  <li>曾经，渴望能够看山川湖海，朝霞晚风，如今，旅行的时候更多的是想躺在酒店。</li>
  <li>曾经，想有拥有一台相机，拍摄城市主题的照片，如今，游玩的时候甚至都不想拿相机（相机确实太重了，后面入手个轻点）。</li>
  <li>曾经，喝酒熬夜唱歌，如今十一点关灯睡觉。</li>
  <li>曾经，我确实没想到我会想要住在城市的钢筋水泥朝九晚五。</li>
</ul>

<p>今年，我忽然觉得我快要老了，我好像看到了我往后的生活。今年，我也有些不甘，我不想年复一年的重复，被生活推着走。</p>

<ul>
  <li>我想，多挣点钱，快点跳出重复的生活。</li>
  <li>我想，学好英语，看看更大的世界，有什么不同。</li>
  <li>我想，好好锻炼，中老年也能有个好身体，看看山川湖海，地方人情。</li>
</ul>

<h2 id="关于健身自律给我自由">关于健身：自律给我自由</h2>

<p>3月开始减肥健身，6月成功减了7kg，达到标准体重，大肚子不见了，自律给人的感觉真的太好了，或许自律才是中年人真正的自由。没有变成自己讨厌的油腻大叔，真的是今年最令人骄傲的事情。</p>

<p>因为健身入手了apple watch，本来对手表无感，入手后发现真香，苹果的产品力真强，从来没有让人失望。</p>

<p>今年开始关注养生。原来阳光是衰老的罪魁祸首，在此之前，以为阳光只是影响肤色，从来没有刻意的回避阳光。其实养生的知识应该更早，更广的被大家知道。今年开始注意防晒，在上适当的运动，也更加关注睡眠。饮食上，适当减少碳水和糖分，增加蛋白质摄入。身体状况，自我感觉上比去年好。（22年新冠后的感觉太糟糕了）</p>

<h3 id="next">Next：</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />6块腹肌</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />跑一次半马</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />10km 配速6min/1km</li>
</ul>

<h2 id="关于生活路过几个地方听过几首歌">关于生活：路过几个地方，听过几首歌</h2>

<p>今年整体是平淡的一年，生活的主体被工作填满，趁着工作和生活的间隙，去过几个地方，路过几个城市。</p>

<p>去年一直跑从化，看花玩水，最主要的原因是初哥对往山里跑没啥兴趣，另外我自己好像也更喜欢住酒店，游泳，健身，吃自助，散步，睡觉玩游戏…这些休闲方式都可以在住酒店中体验到。广州周边的酒店，肇庆、中山、深圳、增城、清远… 周末车程的城市，好像都去过了。</p>

<p>假期回家的间隙，路过了郴州、长沙、常德、韶关、岳阳、永州…，虽匆匆忙忙，但来来回回好多趟，也住了不少酒店，吃过各种特色小吃。一路上的城市，我好像挺喜欢常德，初哥也一直对常德学院后街的山东大饼念念不忘。常德各方面都还好，但没有郴州的聒噪。常德市区很好配套地方的房子7k多，原来学校、公园、商业好的地方也不一定要很贵。也许退休后会愿意去那里住上一阵子。</p>

<p>10月回家，高速塞车，走的乡道，一路上风景宜人，也好多新式的自建房，人们不紧不慢的生活。山川田野，我所珍视的东西，原来普通的农民也可以轻松拥有。那一刻，我觉得人生应该有不同的路径。希望能够早些多赚点钱，自由的去支配余下生活。</p>

<p>11月，万青来广州草莓音乐节了，音乐节场地听破烂的，但是万青一如既往的震撼。其他的文字说不出来，只能说万青牛逼。遗憾的是，12月张悬也来广州了，我没去。从人人网一组照片开始，发现还有女生能够拿着酒瓶唱歌，喜欢了这么多年，却没有去过一次现场，希望以后能够补上。今年好像有点喜欢福禄寿的歌，下次有机会去现场听听。</p>

<h3 id="next-1">Next：</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />办护照，去泰国看看</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />视频创作，输出5+视频作品</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />入手iphone 15 pro</li>
</ul>

<h2 id="关于工作持续降本增效">关于工作：持续降本增效</h2>

<blockquote>
  <p><strong>所以事实是变化如此之快，机会如此之多，一定要留在赌局里，别轻易地离开牌桌。</strong></p>
</blockquote>

<p>今年工作是很艰难的一年，5月合并了两个小组，管理20来号人，算是拿到部门的核心业务。7月，刚刚接稳团队，准备有所作为，国家游戏合规整改，集团主动阉割业务，业务线收入腰斩，核心业务变成边缘业务。持续的开猿节流，年底团队的人数也砍了一半。裁员确实是一件蛮难的事情，到现在已经差不多麻木了。</p>

<p>在工作业绩方面，业务下行的时候，能做的事情也不多。比较难有亮点，当然人员持续减少，本来管理的挑战也是挺大的，自己还能保住这份工已经算是幸运，也不能苛求太多。明年可以预计，关于工作仍然是艰难的一年，努力做好自己的事情，莫问前程。</p>

<p>在个人成长方面，今年有意无意的开始提升个人认知，开始尝试用自己的思维框架去解释变化和发生的事情。管理上也有一些实践和一些理解。当然，管理这个事情，实践过好像就那么回事。回到底层还是个人的认知决定了管理的天花板。认知固化是一件可怕的事情，人到中年要做到处事不惊，也要辩证的看事情，及时更新自己的观点，建立自己的逻辑框架。世界变化很快，观点随时都可能变，但是底层的逻辑框架是固定的。</p>

<p>技术成长方面，今年做的不是很好，没有什么提升。以前判断掌握了业务逻辑，就会建立一定的壁垒。技术的飞速发展，开发的门槛逐渐降低，开发逐渐成为了支撑的工具，技术职级好像没什么上升的空间。</p>

<h3 id="next-2">Next:</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />保住工作</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />AI-based coding</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />提升认知</li>
</ul>

<h2 id="财务状况">财务状况：</h2>

<p>23年的财务状况只能在比烂的过程中找到一丝安慰。</p>

<p>今年整个广州的房子急转直下，整体缩水30%。黄埔是重灾区，手上的房子亏麻了，辛苦工作一年，总资产同比去年反而变少了。当然，这一轮的经济下行，大家都是时代下的一粒尘。城市中产面临的阶级的滑落的痛感会更强烈，对于我个人而言，目前至少还没有感受到债务的压力。</p>

<p>任何事情都有两面性，是挑战也是机会。房子的持有成本太高，普通人通过房产来实现资产增值的逻辑已经不通了。所幸的目标改善的房子也大幅降价，当然明年也不是改善房子的好时机，一定要稳住。不要冲动，守好自己的钱包。</p>

<p>理财方面，一顿操作猛如虎，收益还不如按兵不动，所幸没亏钱。托美股科技公司的福，富途上显示的收益20+%，只可惜英伟达和微软仓位太低。A股留了一只新能源的基金，类似亏损40%+，也没打算卖，留在里面交学费，警醒自己，远离A股，小赌怡情，大赌伤身。</p>

<p>债务方面，今年清空了车贷，希望明年能清空一套房子的贷款。</p>

<h3 id="next节流">Next：节流</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />控制房产投入，调整仓位，拥抱AIGC</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />初哥转广外，降低开支</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />清空3.9%利率的房贷</li>
</ul>

<h2 id="关于ai一边惶恐一边庆幸">关于AI：一边惶恐，一边庆幸</h2>

<p>今年AI发展太快了，基于大模型的应用也是让人眼花缭乱。ChatGPT4的能力也是让人惊叹，知识密集性的工作逐步一点一点的被AI蚕食。虽然AI现在还没办法取代程序员，不是因为AI不够好，可能更多的是我们还没有迭代出更好的与AI协作的方式。未来优秀的人的能力会被AI进一步放大，也许真的不需要那么多人。</p>

<p>AI是下一个科技革命，也是人类唯一的出路，2023也许是应该被人类历史记住的一年。身处在这个时代，一边惶恐，赖以生存的技能逐步被AI取代，一边又庆幸，身处其中。AI技术的革新，旧的技术都落后了，新的底层技术大家都不懂，这一点上AI对大家蛮公平，现在进场，可以早点成为专家。可惜的身为技术人，今年对AI的研究着实有限。</p>

<h3 id="next-3">Next：</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />转型成为AI领域的技术人</li>
</ul>

<h2 id="未完成的事情自建房英语学习">未完成的事情：自建房&amp;英语学习</h2>

<p>年初的时候特别想在老家买一块地，建一个自己的房子，有一个自己的小院。当时感觉比较强烈，已经做好准备负债开始操办。</p>

<p>执行的时候因为一系列的困难搁浅了，现在回想过来，也算好事。今年的经济不景气，没必要冲动消费。</p>

<p>老家的小院也不一定能解决我自己的需求，父母也不一定愿意住，农村对于老人还是不太方面，自己养老的住所现在考虑太早，况且我也不太喜欢老家冬天的阴冷。</p>

<p>这几年特别羡慕英语世界的人，尤其是疫情期间。中文信息充斥着戾气、偏见、民族主义、流量至上、娱乐至死，已经很难获取到有效的知识。因为语言障碍被墙了实在可惜，英语也许是最好的辅助技能之一。有的时候我在想，连一个英语都学不好，孩子都能做好的事情，我却做不好，也确实没有什么理由可以成功。</p>

<p>今年本来计划是要好好学习英语的，结果因为各种事情被中断后，就再也没有重启，实在可惜。</p>

<p>到目前我也没有想好，24年有什么好办法能解决这个问题。</p>

<p>不管怎样，学好英语依然是当前最重要的事情之一。</p>

<h3 id="next-4">Next：</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />英语学习</li>
</ul>

<h2 id="2024规划莫听穿林打叶声">2024规划：莫听穿林打叶声</h2>

<p>24年必然也是艰难一年，做一个长期主义，提升认知，空杯心态，多尝试多实践，穿越周期。</p>

<ul class="task-list">
  <li>
    <p>聚焦核心事项，别被纷扰的事情分散注意力，做减法，少即是多</p>
  </li>
  <li>
    <p>空杯心态，多尝试新鲜事物，多更新认知，不要故步自封，不然就真的老了</p>
  </li>
  <li>
    <p>多亲身实践，切勿眼高手低，高认知的穷人是最痛苦的</p>
  </li>
  <li>
    <p>放平心态，不要卷入内耗，消耗精神</p>
  </li>
  <li>
    <p>关心家人，建立良好的家庭氛围</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />学好英语，具备进入外企能力</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />保住工作</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />6块腹肌</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />清空债务</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />办护照，去泰国看看</p>
  </li>
</ul>]]></content><author><name>DempeZheng</name></author><category term="年度总结" /><summary type="html"><![CDATA[年度总结]]></summary></entry><entry><title type="html">TCP/IP协议</title><link href="http://localhost:4000/2022/03/03/TCP-IP/" rel="alternate" type="text/html" title="TCP/IP协议" /><published>2022-03-03T00:00:00+08:00</published><updated>2022-03-03T00:00:00+08:00</updated><id>http://localhost:4000/2022/03/03/TCP-IP</id><content type="html" xml:base="http://localhost:4000/2022/03/03/TCP-IP/"><![CDATA[<h2 id="一tcpip模型">一、TCP/IP模型</h2>

<p><img src="https://arch-long.cn/assets/tcp_ip.png" alt="有帮助的截图" /></p>

<ul>
  <li>
    <p>应用层Application：HTTP，HTTPs，FTP，DNS…</p>
  </li>
  <li>
    <p>传输层Transport：TCP，UDP</p>
  </li>
  <li>
    <p>网络层：Internet：IPv4，IPv6</p>
  </li>
  <li>
    <p>网络访问层Network Access：以太网络、Wi-Fi</p>
  </li>
</ul>

<p><img src="https://docs.oracle.com/cd/E19683-01/806-4075/images/ipov.fig88.epsi.gif" alt="Diagram shows how a packet travels through the TCP/IP stack from the sending host to the receiving host." /></p>

<h2 id="二tcp">二、TCP</h2>

<blockquote>
  <p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义</p>
</blockquote>

<p><img src="https://nmap.org/book/images/hdr/MJB-TCP-Header-800x564.png" alt="TCP header" /></p>

<h2 id="三linux-tcp的实现">三、Linux TCP的实现</h2>

<h3 id="接收数据">接收数据</h3>

<p><img src="https://dreamgoing.github.io/image/TCP-ring-buffer.png" alt="" /></p>

<ul>
  <li>首先linux中用sk_buff数据结构描述packet</li>
  <li>NIC( <strong>network interface cards</strong>) 即网卡检测到有packet到达，从Kernel Memory分配sk_buff数据结构，调用DMA(<strong>Direct memory access</strong>) Engine（注：DMA允许特定硬件直接操作主存。）将包放到sk_buff里面。NIC检测packet到达和packet的发送，不是触发，都是通过poll轮询的方式完成</li>
  <li>Ring Buffer将数据包放置到内核内存区，Ring Buffer的大小固定，不包含实际的数据包，仅包含了指向sk_buff的描述符。当Ring Buffer满时，新来的数据包会被丢弃。</li>
  <li>一旦数据包被成功接收，NIC发起中断，内核的中断处理程序会将数据包传递给IP层，经过IP层的处理，数据包会被放入队列等待TCP层处理。每个数据包经过TCP层的一系列复杂步骤，更新TCP 状态机等等。</li>
  <li>最终到达recv Buffer。TCP层返回ACK确认。用户空间则调用系统调用read(), 读取相应的报文内容。</li>
  <li>recv Buffer的大小可以通过修改<code class="language-plaintext highlighter-rouge">/proc/sys/net/ipv4/tcp_rmem</code>来修改，<code class="language-plaintext highlighter-rouge">cat /proc/sys/net/ipv4/tcp_rmem</code>返回三个值，依次为最小，默认，最大</li>
</ul>

<h3 id="发送数据">发送数据</h3>

<p><img src="http://upload-images.jianshu.io/upload_images/1828490-072a6a7aa5cb2c35.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" /></p>

<p>TCP发送报文和接收报文路径相反，数据包的发送从上至下也经过了三层：用户态空间，系统内核空间，网卡驱动。</p>

<ul>
  <li>应用先将数据写入TCP send Buffer。</li>
  <li>TCP层将send Buffer中的数据构建成TCP 数据包转给IP层</li>
  <li>IP层会将TCP数据包进行处理，并放入QDist（queueing discipline）队列。数据包放入QDist之后，指向数据包的描述符sk_buff被放入Ring Buffer，随后网卡驱动调用DMA Engine将数据包发送到网络链路上。</li>
</ul>

<h2 id="四网络参数调优">四、网络参数调优</h2>

<ul>
  <li>
    <p>backlog</p>

    <ul>
      <li>
        <p>syn queue：tcp_max_syn_backlog</p>
      </li>
      <li>
        <p>accept queue</p>
      </li>
    </ul>
  </li>
</ul>

<p><img src="https://takefive.cn/wp-content/uploads/2021/05/image-16.png" alt="" /></p>

<ul>
  <li>somaxconn</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sysctl <span class="nt">-w</span> net.core.somaxconn<span class="o">=</span>32768
sysctl <span class="nt">-w</span> net.ipv4.tcp_max_syn_backlog<span class="o">=</span>16384
sysctl <span class="nt">-w</span> net.core.netdev_max_backlog<span class="o">=</span>16384
</code></pre></div></div>

<ul>
  <li>
    <p>tcp_syncookies</p>
  </li>
  <li>
    <p>tcp_mem</p>
  </li>
  <li>
    <p>tcp_rmem</p>
  </li>
  <li>
    <p>tcp_wmem</p>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sysctl <span class="nt">-w</span> net.core.rmem_default<span class="o">=</span>262144
sysctl <span class="nt">-w</span> net.core.wmem_default<span class="o">=</span>262144
sysctl <span class="nt">-w</span> net.core.rmem_max<span class="o">=</span>16777216
sysctl <span class="nt">-w</span> net.core.wmem_max<span class="o">=</span>16777216
sysctl <span class="nt">-w</span> net.core.optmem_max<span class="o">=</span>16777216

<span class="c">#sysctl -w net.ipv4.tcp_mem='16777216 16777216 16777216'</span>
sysctl <span class="nt">-w</span> net.ipv4.tcp_rmem<span class="o">=</span><span class="s1">'1024 4096 16777216'</span>
sysctl <span class="nt">-w</span> net.ipv4.tcp_wmem<span class="o">=</span><span class="s1">'1024 4096 16777216'</span>
</code></pre></div></div>

<ul>
  <li>fs_nr_open</li>
</ul>

<h2 id="六faq">六、FAQ</h2>

<ul>
  <li>
    <p>backlog、半连接队列、全连接队列是什么？</p>
  </li>
  <li>
    <p>TCP根据什么定义一个连接</p>
  </li>
  <li>
    <p>TCP怎么保证可靠</p>
  </li>
  <li>
    <p>TCP怎么解决乱序问题</p>
  </li>
  <li>
    <p>TCP拥塞控制</p>
  </li>
  <li>
    <p>Socket缓冲区满了会怎样</p>
  </li>
  <li>
    <p>TCP缓冲区和滑动窗口之间的联系</p>
  </li>
</ul>

<h2 id="参考文档">参考文档</h2>

<p>https://coolshell.cn/articles/11609.html</p>

<p>https://jishuin.proginn.com/p/763bfbd6646f</p>

<p><a href="https://takefive.cn/?p=678">内核网络参数调优的一些整理 – 情笺思墨犹香</a></p>

<p><a href="http://blog.sina.com.cn/s/blog_e59371cc0102vg4n.html">Linux TCP队列相关参数的总结_阿里云基础设施_新浪博客</a></p>

<p>https://sn0rt.github.io/media/paper/TCPlinux.pdf</p>

<p><a href="https://ape-ai.com/viewer.html?file=/books/tcp/Linux%20TCP%20IP%20%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%88%86%E6%9E%90.pdf">AI技术编程</a></p>]]></content><author><name>DempeZheng</name></author><category term="技术" /><summary type="html"><![CDATA[some word here]]></summary></entry><entry><title type="html">关于磁盘IO的那些事</title><link href="http://localhost:4000/2022/03/03/Disk-IO-subsystem/" rel="alternate" type="text/html" title="关于磁盘IO的那些事" /><published>2022-03-03T00:00:00+08:00</published><updated>2022-03-03T00:00:00+08:00</updated><id>http://localhost:4000/2022/03/03/Disk-IO-subsystem</id><content type="html" xml:base="http://localhost:4000/2022/03/03/Disk-IO-subsystem/"><![CDATA[<h2 id="一disk-io-subsystem概览">一、Disk I/O subsystem概览</h2>

<p><img src="https://www.thomas-krenn.com/de/wikiDE/images/e/e0/Linux-storage-stack-diagram_v4.10.png" alt="" /></p>

<p><img src="/images/2022-03-03-16-14-26-image.png" alt="" /></p>

<p><img src="https://i.stack.imgur.com/kiP8n.png" alt="" /></p>

<h2 id="二linux-io-自顶向下过程">二、Linux I/O 自顶向下过程</h2>

<p><img src="https://sean10.github.io/2021/09/08/IO%E8%B7%AF%E5%BE%84%E6%B5%81%E5%90%91%E5%88%9D%E6%8E%A2/IO%E8%B7%AF%E5%BE%84%E6%B5%81%E5%90%91%E5%B0%8F%E8%AE%B0_2020-12-05-01-11-50.png" alt="" /></p>

<h2 id="三io--subsystem-architecture">三、I/O  subsystem architecture</h2>

<p><img src="https://liaoph.com/img/in-post/linux-system-io/io-arch.png" alt="" /></p>

<p>上图概括了一次磁盘 write 操作的过程，假设文件已经被从磁盘中读入了 page cache 中</p>

<ol>
  <li>
    <p>一个用户进程通过 write() 系统调用发起写请求</p>
  </li>
  <li>
    <p>内核更新对应的 page cache</p>
  </li>
  <li>
    <p>pdflush 内核线程将 page cache 写入至磁盘中</p>
  </li>
  <li>
    <p>文件系统层将每一个 block buffer 存放为一个 bio 结构体，并向块设备层提交一个写请求</p>
  </li>
  <li>
    <p>块设备层从上层接受到请求，执行 IO 调度操作，并将请求放入IO 请求队列中</p>
  </li>
  <li>
    <p>设备驱动（如 SCSI 或其他设备驱动）完成写操作</p>
  </li>
  <li>
    <p>磁盘设备固件执行对应的硬件操作，如磁盘的旋转，寻道等，数据被写入到磁盘扇区中</p>
  </li>
</ol>

<h3 id="vfsfile-system-layer">VFS/File System Layer</h3>

<h4 id="虚拟文件系统">虚拟文件系统</h4>

<p>VFS（Virtual File System）：屏蔽下层具体文件系统操作的差异，为上层操作提供一个统一的接口。</p>

<ul>
  <li>
    <p>超级块（Super Block）</p>
  </li>
  <li>
    <p>索引节点（Inode）</p>
  </li>
  <li>
    <p>目录项（Dentry）</p>
  </li>
  <li>
    <p>文件对象（File）</p>
  </li>
</ul>

<p><img src="https://liaoph.com/img/in-post/linux-system-io/vfs.png" alt="" /></p>

<h4 id="page-cache-layer">Page Cache Layer</h4>

<p>在Linux的实现中，文件Cache分为两个层面，一是Page Cache，另一个Buffer Cache，每一个Page Cache包含若干Buffer Cache</p>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9sZGF5LW1lLTEyNTc5MDYwNTguY29zLmFwLXNoYW5naGFpLm15cWNsb3VkLmNvbS8wMDIzX2xpbnV4X3BhZ2VfY2FjaGVfYW5kX2J1ZmZlcl9jYWNoZS9pbWcvMjhfbGludXgtMi42LjE4X3BhZ2VfY2FjaGVfYnVmZmVyX2NhY2hlLnBuZw?x-oss-process=image/format,png" alt="" /></p>

<h3 id="block-layer">Block Layer</h3>

<p>Block layer 处理所有和块设备相关的操作。block layer 最关键是数据结构是 bio 结构体。bio 结构体是 file system layer 到 block layer 的接口。 当执行一个写操作时，文件系统层将数据写入 page cache（由 block buffer 组成），将连续的块放到一起，组成 bio 结构体，然后将 bio 送至 block layer。</p>

<p><img src="https://image.ldbmcs.com/2021-03-22-rA5r5y.jpg" alt="" /></p>

<p>block layer 处理 bio 请求，并将这些请求链接成一个队列，称作 IO 请求队列，这个连接的操作就称作 IO 调度（也叫 IO elevator 即电梯算法）.</p>

<h4 id="io-sheduler">IO sheduler</h4>

<p>IO 调度器的总体目标是减少磁盘的寻道时间（因此调度器都是针对机械硬盘进行优化的），IO 调度器通过两种方式来减少磁盘寻道：<strong>合并</strong>和<strong>排序</strong>。</p>

<p>调度器的算法和电梯运行的策略相似，因此 IO 调度器也被称作 IO 电梯( IO Elevator )。由于对请求进行了重排，一部分的请求可能会被延迟，以提升整体的性能。</p>

<ul>
  <li>
    <p>Linus Elevator</p>
  </li>
  <li>
    <p>Deadline - latency-oriented</p>
  </li>
  <li>
    <p>Anticipatory(AS)</p>
  </li>
  <li>
    <p>Complete Fair Queuing(CFQ) - faireness-oriented</p>
  </li>
  <li>
    <p>NOOP(No Operationo)</p>
  </li>
</ul>

<h3 id="disk-device">Disk device</h3>

<p>机械磁盘性能影响因素</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Tseek</code>寻道时间（一般在3~15ms）</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Trotation</code>旋转延迟</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Transfer</code>数据传输时间</p>
  </li>
</ul>

<h2 id="四java-io">四、Java IO</h2>

<p><img src="https://www.0xffffff.org/images/41/linux-io.png" alt="" /></p>

<h3 id="buffer-io">Buffer IO</h3>

<p>适用于普通类型的文件读写，性能尚可，操作简单，无注意事项。</p>

<h3 id="mmap">MMAP</h3>

<p><img src="https://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/063/6345/6345f2.jpg" alt="" /></p>

<ul>
  <li>
    <p>优点</p>

    <ul>
      <li>小数据量的读写性能极高</li>
    </ul>
  </li>
  <li>
    <p>缺点</p>

    <ul>
      <li>
        <p>映射的大小最好4k对齐</p>
      </li>
      <li>
        <p>释放麻烦</p>
      </li>
      <li>
        <p>只能定长</p>
      </li>
      <li>
        <p>随机写频繁的场景下，性能不一定比Buffer IO快</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="direct-io">Direct IO</h3>

<p>需要自己控制Cache时，可以适用Direct IO，例如数据库/中间件应用，可以避免文件的读写还经过一层Page Cache，造成额外开销。</p>

<ul>
  <li>
    <p>在 open 時下的參數，允許用戶直接繞過 Linux kernel’s caches (Page Cache) 直接從用戶空間傳遞接收 data 到 disk。</p>
  </li>
  <li>
    <p>可以减少复制</p>
  </li>
  <li>
    <p>可能会降低性能，kernel对于缓存做的优化会失效，例如read_ahead</p>
  </li>
</ul>

<h2 id="五-zero-copy">五、 Zero Copy</h2>

<p>传统文件传输的缺陷</p>

<ul>
  <li>
    <p>四次拷贝</p>
  </li>
  <li>
    <p>用户态和内核态切换</p>
  </li>
</ul>

<p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure1.gif" alt="Traditional data copying approach" /></p>

<ul>
  <li>
    <p>DMA：直接内存访问（<em>Direct Memory Access</em>）技术</p>

    <ul>
      <li>在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务</li>
    </ul>
  </li>
  <li>
    <p>NIC Buffer： Network Interface Controller Buffer</p>
  </li>
</ul>

<p><img src="https://s3.us.cloud-object-storage.appdomain.cloud/developer/default/articles/j-zerocopy/images/figure2.gif" alt="Traditional context switches" /></p>

<h3 id="first-optmization">First optmization</h3>

<p><img src="https://forum.huawei.com/enterprise/en/data/attachment/forum/201905/24/152342tio7forhklj3luub.png?Zero%20copy3.png" alt="152342tio7forhklj3luub.png?Zero%20copy3." /></p>

<ul>
  <li>TransferTo：Java支持zero copy的函数，底层是sendfile</li>
</ul>

<p><img src="https://forum.huawei.com/enterprise/en/data/attachment/forum/201905/24/152348gsitiirtrsfycvrh.png?Zero%20copy4.png" alt="152348gsitiirtrsfycvrh.png?Zero%20copy4." /></p>

<h3 id="second-optimization">Second optimization</h3>

<p><img src="https://forum.huawei.com/enterprise/en/data/attachment/forum/201905/24/152400j83v30drr3oc77d5.png?Zero%20copy5.png" alt="152400j83v30drr3oc77d5.png?Zero%20copy5." /></p>

<ul>
  <li>Descriptor：文件描述符
    <ol>
      <li>the DMA engine copies the contents of the file to the read buffer;</li>
    </ol>
  </li>
</ul>

<ol>
  <li><strong>Only the information descriptor of the position and length of the data is appended to the socket buffer</strong>. DMA directly copies the data from the read buffer to the NIC buffer; thus omitting the CPU copy;</li>
</ol>

<h4 id="mmap-1">mmap</h4>

<p>mmap 是 Linux 提供的一种内存映射文件的机制，它实现了将内核中读缓冲区地址与用户空间缓冲区地址进行映射，从而实现内核缓冲区与用户缓冲区的共享。
这样就减少了一次用户态和内核态的 CPU 拷贝，但是在内核空间内仍然有一次 CPU 拷贝。</p>

<p>mmap 对大文件传输有一定优势，但是小文件可能出现碎片，并且在多个进程同时操作文件时可能产生引发 coredump 的 signal。</p>

<h2 id="六基于磁盘io的设计与调优">六、基于磁盘I/O的设计与调优</h2>

<h3 id="基于磁盘io的设计优化">基于磁盘I/O的设计优化</h3>

<h4 id="采用追加写">采用追加写</h4>

<ul>
  <li>
    <p>数据是被整体访问，比如HDFS</p>
  </li>
  <li>
    <p>知道文件明确的偏移量，比如kafka</p>
  </li>
  <li>
    <p>日志结构合并树LSM，比如HBase，LevelDB</p>
  </li>
</ul>

<h4 id="文件合并和元数据优化">文件合并和元数据优化</h4>

<p>目前的大多数文件系统，如XFS/Ext4、GFS、HDFS，在元数据管理、缓存管理等实现策略上都侧重大文件</p>

<ul>
  <li>
    <p>小文件合并</p>
  </li>
  <li>
    <p>元数据管理优化</p>
  </li>
</ul>

<h3 id="基于磁盘io的参数调优">基于磁盘I/O的参数调优</h3>

<ul>
  <li>
    <p>IO调度队列长度</p>

    <ul>
      <li>
        <p>/sys/block//queue/nr_requests</p>
      </li>
      <li>
        <p>默认128，一般不建议修改</p>
      </li>
    </ul>
  </li>
  <li>
    <p>read-ahead预读</p>
  </li>
</ul>

<blockquote>
  <p>预读量的默认值为512扇区，即256KB。用户可以使用cat命令查询当前块设备预读量。</p>
</blockquote>

<blockquote>
  <p>linux-ob3a:~ # cat /sys/block/sdc/queue/read_ahead_kb 512</p>
</blockquote>

<h2 id="七io的指标与监控">七、IO的指标与监控</h2>

<ul>
  <li>IOPS</li>
</ul>

<p>每秒的输入输出量(或读写次数)，也就是在一秒内，磁盘进行多少次 I/O 读写。是衡量磁盘性能的主要指标之一。</p>

<ul>
  <li>吞吐量</li>
</ul>

<p>指单位时间内可以成功传输的数据数量。即磁盘写入加上读出的数据的大小。吞吐量等于IOPS乘以每次IO大小。</p>

<ul>
  <li>使用率</li>
</ul>

<p>使用率，是指磁盘处理I/O的时间百分比，也就是一个时间段内磁盘用于处理IO的时间占这段时间的比例。过高的使用率(比如超过80% ) , 通常意味着磁盘I/O存在性能瓶颈。</p>

<ul>
  <li>饱和度</li>
</ul>

<p>饱和度，是指磁盘处理I/O的繁忙程度，也就是能否接受新的IO请求。过高的饱和度,意味着磁盘存在严重的性能瓶颈。当饱和度为100%时,磁盘无法接受新的I/O请求。</p>

<ul>
  <li>响应时间</li>
</ul>

<p>响应时间,是指I/O请求从发出到收到响应的间隔时间。</p>

<h3 id="性能监测工具提供的指标">性能监测工具提供的指标</h3>

<table>
  <thead>
    <tr>
      <th>性能工具</th>
      <th>性能指标</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>iostat</td>
      <td>磁盘I/O使用率、IOPS、 吞吐量、响应时间、I/O平均大小以及等待队列长度</td>
    </tr>
    <tr>
      <td>pidstat</td>
      <td>进程I/O大小以及I/O延迟</td>
    </tr>
    <tr>
      <td>sar</td>
      <td>磁盘I/O使用率、IOPS 、吞吐量以及响应时间</td>
    </tr>
    <tr>
      <td>dstat</td>
      <td>磁盘I/O使用率、IOPS以及吞吐量</td>
    </tr>
    <tr>
      <td>iotop</td>
      <td>按I/O大小对进程排序</td>
    </tr>
    <tr>
      <td>slabtop</td>
      <td>目录项、索引节点以及文件系统的缓存</td>
    </tr>
    <tr>
      <td>/proc/slabinfo</td>
      <td>目录项、索引节点以及文件系统的缓存</td>
    </tr>
    <tr>
      <td>/proc/meminfo</td>
      <td>页缓存和可回收Slab缓存</td>
    </tr>
    <tr>
      <td>/proc/diskstats</td>
      <td>磁盘的IOPS、吞吐量以及延迟!</td>
    </tr>
    <tr>
      <td>/proc/pid/io</td>
      <td>进程IOPS、IO大小以及IO延迟</td>
    </tr>
    <tr>
      <td>vmstat</td>
      <td>缓存和缓冲区用量汇总</td>
    </tr>
    <tr>
      <td>blktrace</td>
      <td>跟踪块设备I/O事件</td>
    </tr>
    <tr>
      <td>biosnoop</td>
      <td>跟踪进程的块设备I/O大小</td>
    </tr>
    <tr>
      <td>biotop</td>
      <td>跟踪进程块I/O并按I/O大小排序</td>
    </tr>
    <tr>
      <td>strace</td>
      <td>跟踪进程的I/O系统调用</td>
    </tr>
    <tr>
      <td>perf</td>
      <td>跟踪内核中的I/O事件</td>
    </tr>
    <tr>
      <td>df</td>
      <td>磁盘空间和索引节点使用量和剩余量</td>
    </tr>
    <tr>
      <td>mount</td>
      <td>文件系统的挂载路径以及挂载参数</td>
    </tr>
    <tr>
      <td>du</td>
      <td>目录占用的磁盘空间大小</td>
    </tr>
    <tr>
      <td>tune2fs</td>
      <td>显示和设置文件系统参数</td>
    </tr>
    <tr>
      <td>hdparam</td>
      <td>显示和设置磁盘参数</td>
    </tr>
  </tbody>
</table>

<h2 id="八faq">八、FAQ</h2>

<ul>
  <li>
    <p>描述下数据写入磁盘的过程，</p>
  </li>
  <li>
    <p>说说zero copy技术，以及应用场景</p>
  </li>
</ul>

<h2 id="参考文档">参考文档</h2>

<p><a href="Linux perf Examples](https://www.brendangregg.com/perf.html)"># Linux Perf</a></p>

<p><a href="https://sean10.github.io/2021/09/08/IO%E8%B7%AF%E5%BE%84%E6%B5%81%E5%90%91%E5%88%9D%E6%8E%A2/"># IO路径流向初探 行路中. 脚踏实地</a></p>

<p><a href="http://kerneltravel.net/blog/2020/io_sys_szp_no2/"># I/O设备吞吐量与延迟简介</a></p>

<p><a href="http://embeddedsystemforu.blogspot.com/2013/08/glimpses-of-device-drivers.html"># Embedded System: Glimpses of Device drivers</a></p>

<p><a href="https://blog.csdn.net/jinking01/article/details/107480248"># Linux内核Page Cache和Buffer Cache关系及演化历史_jinking01的专栏-CSDN博客</a></p>

<p><a href="https://liaoph.com/linux-system-io/"># Linux 性能优化之 IO 子系统 - Fantasy</a><a href="https://liaoph.com/linux-system-io/">Linux 性能优化之 IO 子系统 - Fantasy</a></p>

<p><a href="https://www.i4k.xyz/article/universsky2015/100528640"># 内存映射文件 mmap 原理深度剖析_禅与计算机程序设计艺术-程序员信息网 - 程序员信息网</a></p>

<p><a href="http://hushi55.github.io/2015/10/22/linux-network-stack"># linux network stack</a></p>]]></content><author><name>DempeZheng</name></author><category term="技术" /><summary type="html"><![CDATA[some word here]]></summary></entry><entry><title type="html">Network I/O 初探</title><link href="http://localhost:4000/2022/02/05/Network-subSystem/" rel="alternate" type="text/html" title="Network I/O 初探" /><published>2022-02-05T00:00:00+08:00</published><updated>2022-02-05T00:00:00+08:00</updated><id>http://localhost:4000/2022/02/05/Network-subSystem</id><content type="html" xml:base="http://localhost:4000/2022/02/05/Network-subSystem/"><![CDATA[<h2 id="一概览">一、概览</h2>

<p><img src="https://i.stack.imgur.com/kiP8n.png" alt="" /></p>

<h2 id="二linux-network-subsystempacket-receiving-process">二、Linux Network subsystem：Packet Receiving Process</h2>

<p><img src="https://myaut.github.io/dtrace-stap-book/images/net.png" alt="image:net" /></p>

<p><img src="https://www.researchgate.net/profile/Victor-Moreno-15/publication/279541668/figure/fig7/AS:669497044246544@1536631942904/Linux-NAPI-RX-scheme.png" alt="4: Linux NAPI RX scheme" /></p>

<h3 id="ring-buffer">Ring buffer</h3>

<p><strong>Ring Buffer</strong> 位于 NIC 和 IP 层之间（准确的说位于 NIC driver 中），是一个典型的 FIFO 环形队列。Ring Buffer 没有包含数据本身，而是包含了指向 <code class="language-plaintext highlighter-rouge">sk_buff</code>（socket kernel buffers）的描述符</p>

<blockquote>
  <p>Network input-output can require transferring huge amounts of data, so it may be ineffective to explicitly send write commands for each packet. Instead of handling each packet individually, NIC and its driver maintain shared <em>ring buffer</em> where driver puts data while card uses <em>DMA</em> (direct memory access) mechanisms to read data and send it over network. Ring buffers are defined by two pointers: <em>head</em> and <em>tail</em>:</p>
</blockquote>

<p><img src="https://myaut.github.io/dtrace-stap-book/images/ringbuf.png" alt="image:ringbuf" /></p>

<h3 id="ring-buffer--sk_buffer">Ring Buffer &amp; sk_buffer</h3>

<p><img src="https://myaut.github.io/dtrace-stap-book/images/linux/net.png" alt="image:linux/net" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net.ipv4.tcp_rmem = 4096    87380   16777216
</code></pre></div></div>

<h2 id="三nic--device-driver-processing">三、NIC &amp; Device Driver Processing</h2>

<p><img src="https://i.stack.imgur.com/ptPxv.png" alt="enter image description here" /></p>

<p><img src="https://ylgrgyq.github.io/2017/07/23/linux-receive-packet-1/ring-buffer.png" alt="图片来自参考1，对 raise softirq 的函数名做了修改，改为了 napi_schedule" /></p>

<h2 id="四数据包接收过程">四、数据包接收过程</h2>

<h3 id="网卡内存">网卡→内存</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    <span class="o">+-----+</span>
                   <span class="o">|</span>     <span class="o">|</span>                            <span class="no">Memroy</span>
<span class="o">+--------+</span>   <span class="mi">1</span>     <span class="o">|</span>     <span class="o">|</span>  <span class="mi">2</span>  <span class="no">DMA</span>     <span class="o">+--------+--------+--------+--------+</span>
<span class="o">|</span> <span class="no">Packet</span> <span class="o">|--------&gt;|</span> <span class="no">NIC</span> <span class="o">|------------&gt;|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="o">......</span> <span class="o">|</span>
<span class="o">+--------+</span>         <span class="o">|</span>     <span class="o">|</span>             <span class="o">+--------+--------+--------+--------+</span>
                   <span class="o">|</span>     <span class="o">|&lt;--------+</span>
                   <span class="o">+-----+</span>         <span class="o">|</span>
                      <span class="o">|</span>            <span class="o">+---------------+</span>
                      <span class="o">|</span>                            <span class="o">|</span>
                    <span class="mi">3</span> <span class="o">|</span> <span class="no">Raise</span> <span class="no">IRQ</span>                  <span class="o">|</span> <span class="no">Disable</span> <span class="no">IRQ</span>
                      <span class="o">|</span>                          <span class="mi">5</span> <span class="o">|</span>
                      <span class="o">|</span>                            <span class="o">|</span>
                      <span class="err">↓</span>                            <span class="o">|</span>
                   <span class="o">+-----+</span>                   <span class="o">+------------+</span>
                   <span class="o">|</span>     <span class="o">|</span>  <span class="no">Run</span> <span class="no">IRQ</span> <span class="n">handler</span>  <span class="o">|</span>            <span class="o">|</span>
                   <span class="o">|</span> <span class="no">CPU</span> <span class="o">|------------------&gt;|</span> <span class="no">NIC</span> <span class="no">Driver</span> <span class="o">|</span>
                   <span class="o">|</span>     <span class="o">|</span>       <span class="mi">4</span>           <span class="o">|</span>            <span class="o">|</span>
                   <span class="o">+-----+</span>                   <span class="o">+------------+</span>
                                                   <span class="o">|</span>
                                                <span class="mi">6</span>  <span class="o">|</span> <span class="no">Raise</span> <span class="n">soft</span> <span class="no">IRQ</span>
                                                   <span class="o">|</span>
                                                   <span class="err">↓</span>
</code></pre></div></div>

<blockquote>
  <p><strong>1：</strong> 数据包从外面的网络进入物理网卡。如果目的地址不是该网卡，且该网卡没有开启混杂模式，该包会被网卡丢弃。</p>

  <p><strong>2：</strong> 网卡将数据包通过<a href="https://link.segmentfault.com/?enc=QhyI%2FtG8dGg1LbmLlnpzuA%3D%3D.wXRjOjd3thJLeWC9gzDoXmVQhVSxEWMsWdzKuL74IzFGzsVHsQ2zKFbyecJ25C3iOkOam2GPPavLVor48Q%2FYnw%3D%3D">DMA</a>的方式写入到指定的内存地址，该地址由网卡驱动分配并初始化。注： 老的网卡可能不支持DMA，不过新的网卡一般都支持。</p>

  <p><strong>3：</strong> 网卡通过硬件中断（IRQ）通知CPU，告诉它有数据来了</p>

  <p><strong>4：</strong> CPU根据中断表，调用已经注册的中断函数，这个中断函数会调到驱动程序（NIC Driver）中相应的函数</p>

  <p><strong>5：</strong> 驱动先禁用网卡的中断，表示驱动程序已经知道内存中有数据了，告诉网卡下次再收到数据包直接写内存就可以了，不要再通知CPU了，这样可以提高效率，避免CPU不停的被中断。</p>

  <p><strong>6：</strong> 启动软中断。这步结束后，硬件中断处理函数就结束返回了。由于硬中断处理程序执行的过程中不能被中断，所以如果它执行时间过长，会导致CPU没法响应其它硬件的中断，于是内核引入软中断，这样可以将硬中断处理函数中耗时的部分移到软中断处理函数里面来慢慢处理。</p>
</blockquote>

<h3 id="内核中的网络模块">内核中的网络模块</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                     <span class="o">+-----+</span>
                                             <span class="mi">17</span>      <span class="o">|</span>     <span class="o">|</span>
                                        <span class="o">+-----------&gt;|</span> <span class="no">NIC</span> <span class="o">|</span>
                                        <span class="o">|</span>            <span class="o">|</span>     <span class="o">|</span>
                                        <span class="o">|</span><span class="no">Enable</span> <span class="no">IRQ</span>  <span class="o">+-----+</span>
                                        <span class="o">|</span>
                                        <span class="o">|</span>
                                  <span class="o">+------------+</span>                                      <span class="no">Memroy</span>
                                  <span class="o">|</span>            <span class="o">|</span>        <span class="no">Read</span>           <span class="o">+--------+--------+--------+--------+</span>
                 <span class="o">+---------------&gt;|</span> <span class="no">NIC</span> <span class="no">Driver</span> <span class="o">|&lt;---------------------</span> <span class="o">|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="no">Packet</span> <span class="o">|</span> <span class="o">......</span> <span class="o">|</span>
                 <span class="o">|</span>                <span class="o">|</span>            <span class="o">|</span>          <span class="mi">9</span>            <span class="o">+--------+--------+--------+--------+</span>
                 <span class="o">|</span>                <span class="o">+------------+</span>
                 <span class="o">|</span>                      <span class="o">|</span>    <span class="o">|</span>        <span class="n">skb</span>
            <span class="no">Poll</span> <span class="o">|</span> <span class="mi">8</span>      <span class="no">Raise</span> <span class="n">softIRQ</span> <span class="o">|</span> <span class="mi">6</span>  <span class="o">+-----------------+</span>
                 <span class="o">|</span>                      <span class="o">|</span>             <span class="mi">10</span>       <span class="o">|</span>
                 <span class="o">|</span>                      <span class="err">↓</span>                      <span class="err">↓</span>
         <span class="o">+---------------+</span>  <span class="no">Call</span>  <span class="o">+-----------+</span>        <span class="o">+------------------+</span>        <span class="o">+--------------------+</span>  <span class="mi">12</span>  <span class="o">+---------------------+</span>
         <span class="o">|</span> <span class="n">net_rx_action</span> <span class="o">|&lt;-------|</span> <span class="n">ksoftirqd</span> <span class="o">|</span>        <span class="o">|</span> <span class="n">napi_gro_receive</span> <span class="o">|-------&gt;|</span> <span class="n">enqueue_to_backlog</span> <span class="o">|-----&gt;|</span> <span class="no">CPU</span> <span class="n">input_pkt_queue</span> <span class="o">|</span>
         <span class="o">+---------------+</span>   <span class="mi">7</span>    <span class="o">+-----------+</span>        <span class="o">+------------------+</span>   <span class="mi">11</span>   <span class="o">+--------------------+</span>      <span class="o">+---------------------+</span>
                                                               <span class="o">|</span>                                                      <span class="o">|</span> <span class="mi">13</span>
                                                            <span class="mi">14</span> <span class="o">|</span>        <span class="o">+</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">+</span>
                                                               <span class="err">↓</span>        <span class="err">↓</span>
                                                    <span class="o">+--------------------------+</span>    <span class="mi">15</span>      <span class="o">+------------------------+</span>
                                                    <span class="o">|</span> <span class="n">__netif_receive_skb_core</span> <span class="o">|-----------&gt;|</span> <span class="n">packet</span> <span class="n">taps</span><span class="p">(</span><span class="no">AF_PACKET</span><span class="p">)</span> <span class="o">|</span>
                                                    <span class="o">+--------------------------+</span>            <span class="o">+------------------------+</span>
                                                               <span class="o">|</span>
                                                               <span class="o">|</span> <span class="mi">16</span>
                                                               <span class="err">↓</span>
                                                      <span class="o">+-----------------+</span>
                                                      <span class="o">|</span> <span class="n">protocol</span> <span class="n">layers</span> <span class="o">|</span>
                                                      <span class="o">+-----------------+</span>
</code></pre></div></div>

<ul>
  <li><strong>1：</strong> 数据包从外面的网络进入物理网卡。如果目的地址不是该网卡，且该网卡没有开启混杂模式，该包会被网卡丢弃。</li>
  <li><strong>2：</strong> 网卡将数据包通过<a href="https://link.segmentfault.com/?enc=QhyI%2FtG8dGg1LbmLlnpzuA%3D%3D.wXRjOjd3thJLeWC9gzDoXmVQhVSxEWMsWdzKuL74IzFGzsVHsQ2zKFbyecJ25C3iOkOam2GPPavLVor48Q%2FYnw%3D%3D">DMA</a>的方式写入到指定的内存地址，该地址由网卡驱动分配并初始化。注： 老的网卡可能不支持DMA，不过新的网卡一般都支持。</li>
  <li><strong>3：</strong> 网卡通过硬件中断（IRQ）通知CPU，告诉它有数据来了</li>
  <li><strong>4：</strong> CPU根据中断表，调用已经注册的中断函数，这个中断函数会调到驱动程序（NIC Driver）中相应的函数</li>
  <li><strong>5：</strong> 驱动先禁用网卡的中断，表示驱动程序已经知道内存中有数据了，告诉网卡下次再收到数据包直接写内存就可以了，不要再通知CPU了，这样可以提高效率，避免CPU不停的被中断。</li>
  <li><strong>6：</strong> 启动软中断。这步结束后，硬件中断处理函数就结束返回了。由于硬中断处理程序执行的过程中不能被中断，所以如果它执行时间过长，会导致CPU没法响应其它硬件的中断，于是内核引入软中断，这样可以将硬中断处理函数中耗时的部分移到软中断处理函数里面来慢慢处理。</li>
</ul>

<h3 id="内核的网络模块">内核的网络模块</h3>

<p>软中断会触发内核网络模块中的软中断处理函数，后续流程如下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                 +-----+
                                         17      | |
                                    +-----------&gt;| NIC |
                                    | | |
                                    |Enable IRQ  +-----+ |
                                    | +------------+                                      Memroy | | Read           +--------+--------+--------+--------+
             +---------------&gt;| NIC Driver |&lt;--------------------- | Packet | Packet | Packet | ...... |
             | | | 9            +--------+--------+--------+--------+ | +------------+ | | | skb
        Poll | 8      Raise softIRQ | 6  +-----------------+ | | 10 |
             | ↓                      ↓
     +---------------+  Call  +-----------+        +------------------+        +--------------------+  12  +---------------------+ | net_rx_action |&lt;-------| ksoftirqd | | napi_gro_receive |-------&gt;| enqueue_to_backlog |-----&gt;| CPU input_pkt_queue |
     +---------------+   7    +-----------+        +------------------+   11   +--------------------+      +---------------------+
                                                           | | 13
                                                        14 | + - - - - - - - - - - - - - - - - - - - - - - +
                                                           ↓        ↓
                                                +--------------------------+    15      +------------------------+ | __netif_receive_skb_core |-----------&gt;| packet taps(AF_PACKET) |
                                                +--------------------------+            +------------------------+
                                                           | | 16
                                                           ↓
                                                  +-----------------+ | protocol layers |
                                                  +-----------------+
</code></pre></div></div>

<blockquote>
  <p><strong>7：</strong> 内核中的ksoftirqd进程专门负责软中断的处理，当它收到软中断后，就会调用相应软中断所对应的处理函数，对于上面第6步中是网卡驱动模块抛出的软中断，ksoftirqd会调用网络模块的net_rx_action函数</p>

  <p><strong>8：</strong> net_rx_action调用网卡驱动里的poll函数来一个一个的处理数据包</p>

  <p><strong>9：</strong> 在pool函数中，驱动会一个接一个的读取网卡写到内存中的数据包，内存中数据包的格式只有驱动知道</p>

  <p><strong>10：</strong> 驱动程序将内存中的数据包转换成内核网络模块能识别的skb格式，然后调用napi_gro_receive函数</p>

  <p><strong>11：</strong> napi_gro_receive会处理<a href="https://link.segmentfault.com/?enc=0BMPTeLSJVSdUPDk0VKANA%3D%3D.GLWVgnwM7nhKk9YFzbgZg7%2F%2BZygW2T%2Br6Daj7Vdia9R5lEwnZDq4qRXyOykqeNFB">GRO</a>相关的内容，也就是将可以合并的数据包进行合并，这样就只需要调用一次协议栈。然后判断是否开启了<a href="https://link.segmentfault.com/?enc=N2IQEEClP7fHPtytgJpUzg%3D%3D.yJ4gIOTr9qBLB97oyBbB7YDzDtq8Q4YoC73FJmzJjjuVDfObZQuOSQWxo3NtALukj8HugsGPCoMlcOxOB7IejOjNXJduLUYdZUNFK5FPIoQiV9y%2B0o9KZNut1eIoIFp3">RPS</a>，如果开启了，将会调用enqueue_to_backlog</p>

  <p><strong>12：</strong> 在enqueue_to_backlog函数中，会将数据包放入CPU的softnet_data结构体的input_pkt_queue中，然后返回，如果input_pkt_queue满了的话，该数据包将会被丢弃，queue的大小可以通过net.core.netdev_max_backlog来配置</p>

  <p><strong>13：</strong> CPU会接着在自己的软中断上下文中处理自己input_pkt_queue里的网络数据（调用__netif_receive_skb_core）</p>

  <p><strong>14：</strong> 如果没开启<a href="https://link.segmentfault.com/?enc=wvJ4e3u9YoQSACxTL8WNOg%3D%3D.YQHL%2FcinyDaNPhsFkn03QpuEg5lslVGESjXvtGh0I31FghKKCKO3bGNWV%2FJ6nNjukom4YkGzzndpOJz3ywv4O%2FvTf0Sw8QYeqp0IKPeoZ3N4%2B7S%2FpdPCku3sLKVkZtba">RPS</a>，napi_gro_receive会直接调用__netif_receive_skb_core</p>

  <p><strong>15：</strong> 看是不是有AF_PACKET类型的socket（也就是我们常说的原始套接字），如果有的话，拷贝一份数据给它。tcpdump抓包就是抓的这里的包。</p>

  <p><strong>16：</strong> 调用协议栈相应的函数，将数据包交给协议栈处理。</p>

  <p><strong>17：</strong> 待内存中的所有数据包被处理完成后（即poll函数执行完成），启用网卡的硬中断，这样下次网卡再收到数据的时候就会通知CPU</p>
</blockquote>

<h3 id="协议栈">协议栈</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>          <span class="o">|</span>
          <span class="o">|</span>
          <span class="err">↓</span>         <span class="n">promiscuous</span> <span class="n">mode</span> <span class="o">&amp;&amp;</span>
      <span class="o">+--------+</span>    <span class="no">PACKET_OTHERHOST</span> <span class="p">(</span><span class="n">set</span> <span class="n">by</span> <span class="n">driver</span><span class="p">)</span>   <span class="o">+-----------------+</span>
      <span class="o">|</span> <span class="n">ip_rcv</span> <span class="o">|--------------------------------------&gt;|</span> <span class="n">drop</span> <span class="n">this</span> <span class="n">packet</span><span class="o">|</span>
      <span class="o">+--------+</span>                                       <span class="o">+-----------------+</span>
          <span class="o">|</span>
          <span class="o">|</span>
          <span class="err">↓</span>
<span class="o">+---------------------+</span>
<span class="o">|</span> <span class="no">NF_INET_PRE_ROUTING</span> <span class="o">|</span>
<span class="o">+---------------------+</span>
          <span class="o">|</span>
          <span class="o">|</span>
          <span class="err">↓</span>
      <span class="o">+---------+</span>
      <span class="o">|</span>         <span class="o">|</span> <span class="n">enabled</span> <span class="n">ip</span> <span class="n">forword</span>  <span class="o">+------------+</span>        <span class="o">+----------------+</span>
      <span class="o">|</span> <span class="n">routing</span> <span class="o">|--------------------&gt;|</span> <span class="n">ip_forward</span> <span class="o">|-------&gt;|</span> <span class="no">NF_INET_FORWARD</span> <span class="o">|</span>
      <span class="o">|</span>         <span class="o">|</span>                     <span class="o">+------------+</span>        <span class="o">+----------------+</span>
      <span class="o">+---------+</span>                                                   <span class="o">|</span>
          <span class="o">|</span>                                                         <span class="o">|</span>
          <span class="o">|</span> <span class="n">destination</span> <span class="no">IP</span> <span class="n">is</span> <span class="n">local</span>                                 <span class="err">↓</span>
          <span class="err">↓</span>                                                 <span class="o">+---------------+</span>
 <span class="o">+------------------+</span>                                       <span class="o">|</span> <span class="n">dst_output_sk</span> <span class="o">|</span>
 <span class="o">|</span> <span class="n">ip_local_deliver</span> <span class="o">|</span>                                       <span class="o">+---------------+</span>
 <span class="o">+------------------+</span>
          <span class="o">|</span>
          <span class="o">|</span>
          <span class="err">↓</span>
 <span class="o">+------------------+</span>
 <span class="o">|</span> <span class="no">NF_INET_LOCAL_IN</span> <span class="o">|</span>
 <span class="o">+------------------+</span>
          <span class="o">|</span>
          <span class="o">|</span>
          <span class="err">↓</span>
    <span class="o">+-----------+</span>
    <span class="o">|</span> <span class="no">UDP</span> <span class="n">layer</span> <span class="o">|</span>
    <span class="o">+-----------+</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li><strong>ip_rcv：</strong> ip_rcv函数是IP模块的入口函数，在该函数里面，第一件事就是将垃圾数据包（目的mac地址不是当前网卡，但由于网卡设置了混杂模式而被接收进来）直接丢掉，然后调用注册在NF_INET_PRE_ROUTING上的函数</li>
    <li><strong>NF_INET_PRE_ROUTING：</strong> netfilter放在协议栈中的钩子，可以通过iptables来注入一些数据包处理函数，用来修改或者丢弃数据包，如果数据包没被丢弃，将继续往下走</li>
    <li><strong>routing：</strong> 进行路由，如果是目的IP不是本地IP，且没有开启ip forward功能，那么数据包将被丢弃，如果开启了ip forward功能，那将进入ip_forward函数</li>
    <li><strong>ip_forward：</strong> ip_forward会先调用netfilter注册的NF_INET_FORWARD相关函数，如果数据包没有被丢弃，那么将继续往后调用dst_output_sk函数</li>
    <li><strong>dst_output_sk：</strong> 该函数会调用IP层的相应函数将该数据包发送出去，同下一篇要介绍的数据包发送流程的后半部分一样。</li>
    <li><strong>ip_local_deliver</strong>：如果上面<strong>routing</strong>的时候发现目的IP是本地IP，那么将会调用该函数，在该函数中，会先调用NF_INET_LOCAL_IN相关的钩子程序，如果通过，数据包将会向下发送到UDP层</li>
  </ul>
</blockquote>

<h2 id="五io模型">五、I/O模型</h2>

<h3 id="阻塞式io">阻塞式I/O</h3>

<p><img src="https://pdai.tech/_images/pics/1492928416812_4.png" alt="" /></p>

<h3 id="非阻塞式io">非阻塞式I/O</h3>

<p><img src="https://pdai.tech/_images/pics/1492929000361_5.png" alt="" /></p>

<h3 id="io多路复用">I/O多路复用</h3>

<p><img src="https://pdai.tech/_images/pics/1492929444818_6.png" alt="" /></p>

<h4 id="多路复用io实现">多路复用I/O实现</h4>

<ul>
  <li>
    <p>select</p>

    <ul>
      <li>
        <p>select的timeout是1ns，poll和epoll的timeout是1ms，select适用于实时性更高的场景，例如核反应堆</p>
      </li>
      <li>
        <p>select可移植性好</p>
      </li>
    </ul>
  </li>
  <li>
    <p>poll</p>
  </li>
  <li>
    <p>epoll</p>
  </li>
  <li>
    <p>kqueue</p>
  </li>
</ul>

<h3 id="信号量驱动">信号量驱动</h3>

<p><img src="https://pdai.tech/_images/pics/1492929553651_7.png" alt="" /></p>

<h3 id="异步io">异步I/O</h3>

<p><img src="https://pdai.tech/_images/pics/1492930243286_8.png" alt="" /></p>

<h3 id="五大io模型比较">五大I/O模型比较</h3>

<p><img src="https://pdai.tech/_images/pics/1492928105791_3.png" alt="" /></p>

<h2 id="六reactor-pattern">六、Reactor pattern</h2>

<blockquote>
  <p><strong>Reactor模式的底层往往使用select/poll/epoll等I/O复用方式来实现；Proactor模式的底层使用异步I/O（如Windows中的完成端口或UNIX中aio_*()系列函数）来实现。</strong></p>
</blockquote>

<h3 id="传统io模型">传统IO模型</h3>

<p>per thead per connection</p>

<p><img src="https://pdai.tech/_images/io/java-io-reactor-1.png" alt="" /></p>

<h3 id="reactor事件驱动模型">Reactor事件驱动模型</h3>

<p><img src="https://pdai.tech/_images/io/java-io-reactor-2.png" alt="" /></p>

<h3 id="reactor模型业务io分离">Reactor模型：业务&amp;IO分离</h3>

<p><img src="https://pdai.tech/_images/io/java-io-reactor-3.png" alt="" /></p>

<h3 id="reactor模型mainreactorsubreactor">Reactor模型：mainReactor&amp;subReactor</h3>

<p><img src="https://pdai.tech/_images/io/java-io-reactor-4.png" alt="" /></p>

<h2 id="七网络链路调优">七、网络链路调优</h2>

<ol>
  <li>
    <p><strong>网卡Ring Buffer</strong>：根据不同的网卡类型，把Ring Buffer设置成最大值；</p>
  </li>
  <li>
    <p><strong>网卡软中断</strong>：手工绑定中断到多核CPU，避免CPU0的性能瓶颈，提升整体性能；</p>
  </li>
  <li>
    <p><strong>网卡缓冲区到TCP/IP栈之间</strong>：适当增加net.core.netdev_max_backlog的值，提升Input Packet Queue;</p>
  </li>
  <li>
    <p><strong>半连接队列</strong>：开启net.ipv4.tcp_syncookies，防范少量的tcp syn攻击</p>
  </li>
  <li>
    <p><strong>完整连接队列</strong>：通过net.core.somaxconn,调大一些队列长度,给应用程序以更多处理时间</p>
  </li>
  <li>
    <p><strong>Socket Recv Buffer</strong>：开启net.ipv4.tcp_moderate_rcvbuf=1,自动调节机制生效，并且把net.ipv4.tcp_rmem/net.core.rmem_max中默认值和最大值调大</p>
  </li>
</ol>

<h2 id="参考文档">参考文档</h2>

<p>https://i.stack.imgur.com/DN7Vg.png</p>

<p>https://pdai.tech/md/java/io/java-io-nio-select-epoll.html</p>

<p>https://indico.cern.ch/event/408139/contributions/979737/attachments/815628/1117588/CHEP06.pdf</p>

<p>https://myaut.github.io/dtrace-stap-book/kernel/net.html</p>

<p><a href="https://stackoverflow.com/questions/47450231/what-is-the-relationship-of-dma-ring-buffer-and-tx-rx-ring-for-a-network-card">linux - What is the relationship of DMA ring buffer and TX/RX ring for a network card? - Stack Overflow</a></p>]]></content><author><name>DempeZheng</name></author><category term="技术" /><summary type="html"><![CDATA[some word here]]></summary></entry><entry><title type="html">2022，这个世界会好吗</title><link href="http://localhost:4000/2022/01/10/2022-Talk-With-Myself/" rel="alternate" type="text/html" title="2022，这个世界会好吗" /><published>2022-01-10T00:00:00+08:00</published><updated>2022-01-10T00:00:00+08:00</updated><id>http://localhost:4000/2022/01/10/2022%20-Talk-With-Myself</id><content type="html" xml:base="http://localhost:4000/2022/01/10/2022-Talk-With-Myself/"><![CDATA[<h1 id="2022这个世界会好吗">2022，这个世界会好吗</h1>

<h2 id="序言">序言</h2>

<blockquote>
  <p>寄蜉蝣于天地，渺沧海之一粟。 ——苏东坡·《赤壁赋》</p>
</blockquote>

<h2 id="生活琐事">生活琐事</h2>

<p>试着从一月开始回顾了下整个一年的流水，能记起来的事情着实不多。记录生活确实是一件值得用心去做的事情…</p>

<p>1月，买了尼康Z6 Ⅱ。另加两支镜头，果然氪金可以重拾爱好，有了相机，更愿意走出去看看山川湖海了。</p>

<p>2月，临时决定去从化看了李花。正好赶上，繁花似锦，新叶初长，是喜欢的样子，若有机会，23年也想去看看。</p>

<p>4月，妈妈生病了。一颗大石压胸口，很长一段时间都有说不出来的压抑感。</p>

<p>4月，请假回家了，4月武汉很美，一路上大片的油菜花，樱花树随处可见。妈妈在协和做了手术，手术很成功。未来的日子，我会多去烧香礼佛。</p>

<p>6月，去从化草埔看了荷花。我对荷花的喜欢来自高中时候读的一首席慕蓉的诗句，句子忘记了，荷花一直还喜欢着。</p>

<p>8月，趁暑假，回家看看。路过郴州，游了东江湖，雾漫小东江，路上风景很好。一边赶路一遍看风景的体验很好。</p>

<p>9月，初哥读了广理实。临时转了广理实，一年六七万的学费着实心疼的。好在只有一个娃，咬咬牙。初哥在里面还算开心，适应了新学校密集学习，也算是有了咬牙意义。</p>

<p>10月，见了一些高中同学。多年未见，再次见面感觉很好，只是大家都各有生活。</p>

<p>11月，工作上出了一次故障，年底冲击绩效的时候翻车了，没办法，这就是操蛋的生活。</p>

<p>12月，全家陆续感染了奥密克戎。我自己症状挺重，真的不是大号流感。虽然艰难，但是总算大家都挺过来了。这几年疫情真的很魔幻，很多事情不能理解。</p>

<p>12月，新房交楼。楼层有些高，房价有点高，站在山顶的感觉，凉飕飕的。</p>

<h1 id="开猿节流降本增效的一年">开猿节流，降本增效的一年</h1>

<p>2022年，经济下行，整个大互联网环境笼罩在裁员的乌云之下，公司整年都在持续“开源节流，降本增效”。虽然目前保住了这份工，但是预计未来两年仍然互联网行业仍然是寒冬。是否能够顺利过冬，对于快35岁的程序员，其实还是一件蛮难的事情。</p>

<p>时代的一粒灰，落到个人的头上就是一座山。大环境之下，个人的力量实在太渺小。</p>

<p>‍</p>

<h1 id="这个世界会好吗">这个世界会好吗</h1>

<p>整个2022年都在经济下行、疫情封控等各种不确定性中患得患失，碌碌无为。对未来的信心和生活的积极性跌至谷底，好好活着成了首要的目标，想起来还真是可悲可怜。</p>

<p>年底疫情放开了，当然付出的代价也是惨重的，但是总的来说最艰难的总算过去了。那么，2023年会好吗？</p>

<p>这个问题很难回答，对于这个问题，我还是略微有些悲观，很多事情的发展偏离了基础逻辑，未来仍然有很多不确定性的事情发生。长远来看，很多魔幻的事情终究变成历史，经历黑暗最终会迎来光明，可是对于普通人，人的一生的时间很有限，被动的等大环境变好，真的等不起。</p>

<h1 id="2023我需要一些改变">2023，我需要一些改变</h1>

<h1 id="锻炼身体">锻炼身体</h1>

<p>奥密克戎对我的影响还蛮大的，阳的时候很痛苦，转阴之后很长一段时间也觉得精力不复从前。阳康之后，整个人好像老了好几岁。</p>

<p>这几年身体素质下降的厉害，身体是革命的本钱，这个在这几年体会很深刻。年纪大了，没有一个好身体，也谈不上什么生活质量。我还指望，以后退休了，去好好看看这个世界，为自己好好活活。所以明年最首要的任务就好好好锻炼身体。</p>

<h1 id="好好学英语">好好学英语</h1>

<p>从来没有一年，我像2022年一样，这么样迫切的想好好学英语。</p>

<p>‍</p>

<h1 id="关于自媒体">关于自媒体</h1>

<p>关于自媒体，2022年就有计划去尝试，甚至还定了计划，可惜各种原因搁浅了，没能执行下去。程序员这个团体，作为新时代的人矿，燃烧青春，换取薪水，普遍有一定危机感。这一点很像小姐，小姐归路可以找老实人接盘，而程序员没这么好命，35岁被遗弃了只能自谋出路。所以，很多程序员在很早的时候就会各种探索副业。我也看了一些成功的帖子，割韭菜的多，真实分享经验的少。</p>

<p>副业这个事情像一层窗户纸，成功的人觉得很简单，对于门外汉来说，确实不知道从哪里入手。</p>

<p>综合自己多方面的分析，感觉自媒体相对来说也是一个比较靠谱的路子，是有长远收益的。未来内容的价值会持续被放大，能够持续输出优质内容会是个人的核心竞争力。</p>

<p>输出优质内容又可以反向倒逼自己输入信息，持续学习，投身自媒体看起来是一个百利而无害的事情。</p>

<p>我也在自己身边看到越来越多持续坚持输出优质内容成功的案例，身边的案例给我的触动也是很大的。</p>

<p>关于自媒体，2023年需要广泛尝试，不断迭代，持续坚持下去。至于结果前期可以先不用理会太多，重要的是锻炼输出优质内容的能力。</p>

<p>不管是文字媒介还是视频媒介，我始终觉得自己是能够做好的。如果当年没有投身计算机，现在多半是一个媒体行业的从业者。现在投身自媒体也不算糟，没多年的编码经验确实提升了逻辑框架思维，将理性和感性思维结合起来做自媒体，也算是一个亮点。。</p>

<p>#</p>]]></content><author><name>DempeZheng</name></author><category term="年度总结" /><summary type="html"><![CDATA[总结]]></summary></entry><entry><title type="html">关于管理的一些思考</title><link href="http://localhost:4000/2022/01/06/Management-Thinking/" rel="alternate" type="text/html" title="关于管理的一些思考" /><published>2022-01-06T00:00:00+08:00</published><updated>2022-01-06T00:00:00+08:00</updated><id>http://localhost:4000/2022/01/06/Management-Thinking</id><content type="html" xml:base="http://localhost:4000/2022/01/06/Management-Thinking/"><![CDATA[<h1 id="关于管理的一些思考">关于管理的一些思考</h1>

<ul>
  <li>
    <p>管理的本质是横向影响别人，借助他人达成目标；</p>
  </li>
  <li>
    <p>管理是非生产性人才，管理于普遍性依赖于制度，于特殊性依赖于人才，技术人才是生产性人才，尊重不同类型的人才；</p>
  </li>
  <li>
    <p>技术管理的核心之一是用不可靠的人力构建可靠的服务、业务交付；</p>
  </li>
  <li>
    <p>管理是一种实践，其本质不在于知，而在于行；其验证不在于逻辑，而在于成果；其唯一的权威性就是成就。</p>
  </li>
</ul>

<h2 id="看方向大处着眼">看方向：大处着眼</h2>

<p>埋头做事，抬头看天</p>

<ul>
  <li>
    <p>公司战略</p>
  </li>
  <li>
    <p>同行竞品</p>
  </li>
  <li>
    <p>长期规划</p>
  </li>
  <li>
    <p>核心壁垒：价值和壁垒是什么，团队所处的位置</p>
  </li>
  <li>
    <p>核心项目</p>
  </li>
</ul>

<h2 id="管人知人善用同力协助112">管人：知人善用，同力协助，1+1&gt;2</h2>

<ul>
  <li>情境领导</li>
</ul>

<p><img src="/images/20190925150022544.png" alt="20190912150714673.png" /></p>

<ul>
  <li>授权：别让猴子跳回背上</li>
</ul>

<p><img src="/images/image-20211111105052938.png" alt="image-20211111105052938" /></p>

<h2 id="做事抓重点控风险持续迭代">做事：抓重点，控风险，持续迭代</h2>

<ul>
  <li>
    <p>PDCA</p>
  </li>
  <li>
    <p>轻重缓急</p>
  </li>
</ul>

<p><img src="/images/2022-01-06-11-47-07-image.png" alt="" /></p>

<ul>
  <li>
    <p>闭环思维：做事有始有终，不可虎头蛇尾</p>
  </li>
  <li>
    <p>迭代思维</p>

    <ul>
      <li>事前做计划，事中做追踪，事后做分析</li>
    </ul>
  </li>
</ul>

<h2 id="沟通共识承诺化">沟通：共识、承诺化</h2>

<ul>
  <li>
    <p>坦诚沟通</p>
  </li>
  <li>
    <p>同理心</p>
  </li>
  <li>
    <p>多问少说</p>
  </li>
  <li>
    <p>沟通5方针</p>

    <ul>
      <li>开场→收集→方案→共识→结束</li>
    </ul>
  </li>
</ul>

<p><img src="/images/image-20211111110002560.png" alt="image-20211111110002560" /></p>

<h2 id="实践实践出真知">实践：实践出真知</h2>

<p>观测、迭代、解释、再观测…建立属于自己的管理框架；</p>

<h2 id="思考">思考</h2>

<p>思考1：产出一般，没犯错误的低绩效同学如何沟通绩效避免所谓的PUA？</p>

<blockquote>
  <ul>
    <li>
      <p>问题的本质是绩效体系的惩罚体系引入的，很难真正做好；</p>
    </li>
    <li>
      <p>有避免PUA的意识本身已经不是PUA；</p>
    </li>
    <li>
      <p>基于事实，尽可能客观公正，坦诚沟通，遵从内心，不用过度关心别人的想法；</p>
    </li>
    <li>
      <p>绩效沟通的核心目的是对齐下个周期目标；</p>
    </li>
  </ul>
</blockquote>

<p>感情牌：取决于下级是否能拿捏关系分寸；</p>

<p>避免反向授权：猴子调到谁背上的归属原则；</p>

<p>决策逻辑：两害相权取其轻；</p>

<h2 id="参考文档">参考文档</h2>

<p><a href="https://mp.weixin.qq.com/s/7C3m8_mk-ERAykbNUFvhVA"># 阿里资深Leader：组建技术团队的一些思考</a></p>]]></content><author><name>DempeZheng</name></author><category term="成长" /><summary type="html"><![CDATA[总结]]></summary></entry><entry><title type="html">当我们聊消息队列，我们在聊什么</title><link href="http://localhost:4000/2022/01/01/Talk-About-Message-Queue/" rel="alternate" type="text/html" title="当我们聊消息队列，我们在聊什么" /><published>2022-01-01T00:00:00+08:00</published><updated>2022-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2022/01/01/Talk-About-Message-Queue</id><content type="html" xml:base="http://localhost:4000/2022/01/01/Talk-About-Message-Queue/"><![CDATA[<h1 id="当我们聊消息队列我们在聊什么">当我们聊消息队列，我们在聊什么</h1>

<h2 id="一what-is-messaging">一、What is messaging</h2>

<h3 id="request-response模式">request-response模式</h3>

<p>本地系统（client）与通过远程系统（server）暴露的通信终端进行同步通讯。在形式上无论是远程系统调用，还是web service调用，或者是远程资源的消费，这些在本质上都是一个模型，只是表现形式不同：本地系统向远程系统发送消息，本地系统同步等待远程系统返回应答，系统之间通过点对点的方式通讯。</p>

<p><img src="https://static.packt-cdn.com/products/9781783983209/graphics/3209OS_01_01.jpg" alt="img" /></p>

<h3 id="one-way-style模型">one way style模型</h3>

<p>在one way style方式中，系统之间通过传递消息的方式异步交互，所谓异步也就是系统A在发送完消息之后不需要同步等待系统B的应答。</p>

<p><img src="https://static.packt-cdn.com/products/9781783983209/graphics/3209OS_01_02.jpg" alt="img" /></p>

<h3 id="loosely-coupled模型">loosely coupled模型</h3>

<p>在one way style方式中，系统之间通过传递消息的方式异步交互，所谓异步也就是系统A在发送完消息之后不需要同步等待系统B的应答。</p>

<p><img src="https://static.packt-cdn.com/products/9781783983209/graphics/3209OS_01_10.jpg" alt="img" /></p>

<h3 id="消息传递模型">消息传递模型</h3>

<p>在实时流式架构中，消息传递能够分为两类：队列（Queue）和流（Stream）。</p>

<h4 id="队列queue模型">队列（Queue）模型</h4>

<p>A <strong>*queue*</strong> is a simple FIFO mechanism allowing you to add items to the back of the queue or take from the front.</p>

<ul>
  <li>消息只能被消费一次</li>
  <li>消息不能被回溯</li>
  <li>通常和生产消费者模式一起</li>
</ul>

<h4 id="流式stream模型">流式（Stream）模型</h4>

<p>A <strong>*stream*</strong> is not really a data structure as such (conceptually), but is a sequence of digitally encoded coherent signals (packets of data or data packets) used to transmit or receive information”. So basically a sequence of data.</p>

<ul>
  <li>Streams always have a source</li>
  <li>stream processing</li>
  <li>With Pub/Sub pattern</li>
</ul>

<blockquote>
  <p>In stream processing, you apply complex operations on multiple input streams and multiple records (ie, messages) at the same time (like aggregations and joins).</p>
</blockquote>

<h4 id="queue--stream">Queue &amp; Stream</h4>

<p>当前的分布式消息中间件几乎很多都不单纯是消息队列，还提供流式处理的能力，例如kafka，不仅可以发布订阅stream，还可以存储记录，甚至可以做一些简单的streamprocessing。而Apache pulsar直接在消费模型上面，讲queue和stream统一起来都实现了。queue和stream虽然有一些不同，但是界限变得越来越模糊了。</p>

<h2 id="二why-message-queue">二、Why message queue</h2>

<p>消息队列的作用：</p>

<ul>
  <li>
    <p>异步</p>
  </li>
  <li>
    <p>解耦</p>
  </li>
  <li>
    <p>削峰</p>
  </li>
</ul>

<p>disadvantage：</p>

<ul>
  <li>
    <p>maintain message queue</p>

    <ul>
      <li>
        <p>Consume same message twice</p>
      </li>
      <li>
        <p>Lose message</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Inconsistency</p>
  </li>
  <li>
    <p>Availability</p>
  </li>
</ul>

<h2 id="三reliability">三、Reliability</h2>

<ul>
  <li>
    <p>producer→Broker→Consumer 链路可靠</p>

    <ul>
      <li>
        <p>producer：幂等重试</p>
      </li>
      <li>
        <p>Broker：消息可靠存储</p>

        <ul>
          <li>
            <p>消息持久化</p>
          </li>
          <li>
            <p>多副本</p>
          </li>
          <li>
            <p>故障转移</p>
          </li>
        </ul>
      </li>
      <li>
        <p>Consumer： Ack机制</p>

        <ul>
          <li>
            <p>业务幂等</p>
          </li>
          <li>
            <p>Ack机制</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="四-availabilty">四、 Availabilty</h2>

<ul>
  <li>
    <p>Broker无状态</p>
  </li>
  <li>
    <p>Message Store多副本</p>
  </li>
  <li>
    <p>故障自动转移</p>
  </li>
</ul>

<h2 id="五performance">五、Performance</h2>

<ul>
  <li>
    <p>顺序写入</p>
  </li>
  <li>
    <p>partition</p>
  </li>
  <li>
    <p>批量</p>
  </li>
  <li>
    <p>I/O 分离</p>
  </li>
  <li>
    <p>cache</p>

    <ul>
      <li>
        <p>broker cache</p>
      </li>
      <li>
        <p>page cache</p>
      </li>
      <li>
        <p>Log cache</p>
      </li>
    </ul>
  </li>
  <li>
    <p>zero copy</p>
  </li>
  <li>
    <p>数据压缩</p>
  </li>
</ul>

<p>良好设计的消息队列，系统的吞吐取决于网卡，如何设计出低延迟的消息系统也很关键；</p>

<p><strong>Low latency：</strong></p>

<ul>
  <li>
    <p>tailing read</p>

    <ul>
      <li>
        <p>cache</p>
      </li>
      <li>
        <p>并行读</p>
      </li>
    </ul>
  </li>
  <li>
    <p>write</p>

    <ul>
      <li>WAL</li>
    </ul>
  </li>
</ul>

<h2 id="六how-message-queue-design">六、（How） Message queue Design</h2>

<h3 id="message-queue">Message Queue</h3>

<ul>
  <li>
    <p>Queue implements <em>load balancer</em> semantics. A single message will be received by exactly one consumer.</p>
  </li>
  <li>
    <p>点对点（point-to-point）</p>
  </li>
</ul>

<p><strong>disadvantage</strong>：</p>

<ul>
  <li>
    <p>point-to-point（1→1），多个消费者需要多个message queue</p>
  </li>
  <li>
    <p>下游增加消费者，需要上游添加message queue</p>
  </li>
</ul>

<p><img src="/images/2022-01-05-17-45-34-image.png" alt="" /></p>

<h3 id="topic">Topic</h3>

<ul>
  <li>
    <p>Topic implements <em>publish and subscribe</em> semantics</p>
  </li>
  <li>
    <p>publisher-subscriber model</p>
  </li>
  <li>
    <p>publish-and-subcribe（1→many）</p>
  </li>
</ul>

<h4 id="镜像queue">镜像queue</h4>

<ul>
  <li>不同的subscription使用不同的镜像queue，存储不同</li>
</ul>

<p><strong>disadvantage</strong>：</p>

<ul>
  <li>数据冗余，有一定存储和性能浪费</li>
</ul>

<p><img src="/images/2022-01-05-17-31-09-image.png" alt="" /></p>

<h4 id="cursor">Cursor</h4>

<ul>
  <li>
    <p>同一份数据存储</p>
  </li>
  <li>
    <p>subscription维护各自的Cursor（消费游标）</p>
  </li>
</ul>

<p><img src="/images/2022-01-05-17-31-25-image.png" alt="" /></p>

<h3 id="partition-topic">Partition Topic</h3>

<p>单个Topic存在的问题：</p>

<ul>
  <li>topic过大，broker &amp; store 存在瓶颈</li>
</ul>

<p>解决方案：</p>

<ul>
  <li>
    <p>拆分成多个partition</p>
  </li>
  <li>
    <p>partition是逻辑分片，对业务透明</p>
  </li>
</ul>

<p><img src="/images/2022-01-05-17-31-42-image.png" alt="" /></p>

<h2 id="计算和存储分离">计算和存储分离</h2>

<ul>
  <li>
    <p>Broker状态</p>
  </li>
  <li>
    <p>Topic Store水平扩展</p>
  </li>
</ul>

<p>【注】多一层会额外引入性能损耗&amp;系统复杂性</p>

<p><img src="/images/2022-01-05-17-31-56-image.png" alt="" /></p>

<h3 id="topic-store--distribute-log">Topic Store ： Distribute Log</h3>

<ol>
  <li>
    <p>Message queue可以看作是一组有序的数据流（Stream）；</p>
  </li>
  <li>
    <p>日志是一种简单的抽象，只能追加，按时间有序的序列；</p>
  </li>
  <li>
    <p>日志是持久化的数据流；</p>
  </li>
  <li>
    <p>Topic Store核心是日志，分布式消息队列的底层存储是Distribute Log System；</p>
  </li>
</ol>

<p><img src="/images/2022-01-05-17-32-12-image.png" alt="loading-ag-3482" /></p>

<p><img src="/image-20211202164512736.png" alt="image20211202164512736" /></p>

<h4 id="log-workloads-low-latencyhigh-throughput">Log workloads： low latency，High throughput</h4>

<p>日志系统的核心负载可以归为三类：writes，tailing reads，catch-up reads</p>

<p>Writes 和 tailing reads 在意的是延时 (latency)，因为它关系到一个消息能多快地从被写入到被读到。</p>

<p>而 catch-up reads 在意的则是高吞吐量，因为它关系到是否能追赶到日志的尾部。</p>

<p><img src="/images/2022-01-05-17-33-22-image.png" alt="" /></p>

<ul>
  <li>
    <p>tailing reads： log cache &amp; broker cache &amp;page cache</p>

    <ul>
      <li>catch-up reads可能会造成cache污染</li>
    </ul>
  </li>
  <li>
    <p>writes： append only</p>

    <ul>
      <li>
        <p>topic维度的顺序写</p>
      </li>
      <li>
        <p>Write Ahead Log</p>
      </li>
    </ul>
  </li>
  <li>
    <p>catch-up reads</p>

    <ul>
      <li>避免污染cache</li>
    </ul>
  </li>
</ul>

<h4 id="工程投影分布式日志系统bookeeper">工程投影：分布式日志系统Bookeeper</h4>

<p><img src="https://dolphin7.xyz/images/bk1.png" alt="bk1" /></p>

<h3 id="高级功能">高级功能</h3>

<ul>
  <li>顺序保证
    <ul>
      <li>单个partition有序</li>
    </ul>
  </li>
  <li>延迟队列</li>
  <li>事务消息</li>
  <li>跨地域复制</li>
  <li>多租户
    <ul>
      <li>租户隔离</li>
      <li>租户调整有挑战</li>
    </ul>
  </li>
  <li>消息语义保证
    <ul>
      <li>at least once</li>
      <li>at most once</li>
      <li>extractly once</li>
    </ul>
  </li>
</ul>

<h2 id="参考文档">参考文档：</h2>

<p><a href="https://alexstocks.github.io/html/pulsar.html">pulsar笔记</a></p>

<p><a href="https://mp.weixin.qq.com/s/CIpCLCxqpLoQVUKz6QeDJQ">理解Apache Pulsar工作原理</a></p>

<p><a href="[translations/part1-what-is-a-log.md at master · oldratlee/translations · GitHub](https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/part1-what-is-a-log.md)">日志是什么</a></p>

<p><a href="https://mp.weixin.qq.com/s/0dkgA8swNPkpcY5H6CU62w">Twitter高性能分布式日志系统架构解析</a></p>

<p><a href="https://www.infoq.cn/article/ikqw6fsidfcmqk2uqmwo">如何打造可以无限扩展的分布式消息队列?-InfoQ</a></p>

<p><a href="[queue - Difference between stream processing and message processing - Stack Overflow](https://stackoverflow.com/questions/41744506/difference-between-stream-processing-and-message-processing)">difference-between-stream-processing-and-message-processing</a></p>

<p><a href="https://www.packtpub.com/product/rabbitmq-essentials/9781783983209">What is messaging?</a></p>

<p><a href="[Apache BookKeeper™ - DistributedLog](https://sijie.github.io/bookkeeper-staging-site/docs/4.6.1/api/distributedlog-api/)">Distribute Log</a></p>

<p><a href="https://www.slidestalk.com/ApachePulsar/PulsarStreamNativeJia4336272">Apache Pulsar 从消息系统到流原生平台-Jia</a></p>

<p><a href="https://www.bilibili.com/video/BV1Tf4y1s7T9/">System Design - Message Queue</a></p>]]></content><author><name>DempeZheng</name></author><category term="技术" /><summary type="html"><![CDATA[消息队列]]></summary></entry><entry><title type="html">关于复盘</title><link href="http://localhost:4000/2021/12/25/About-replay/" rel="alternate" type="text/html" title="关于复盘" /><published>2021-12-25T00:00:00+08:00</published><updated>2021-12-25T00:00:00+08:00</updated><id>http://localhost:4000/2021/12/25/About-replay</id><content type="html" xml:base="http://localhost:4000/2021/12/25/About-replay/"><![CDATA[<h1 id="关于复盘">关于复盘</h1>

<h1 id="一what">一、What</h1>

<ul>
  <li>
    <p>复盘是结构化的学习方法</p>
  </li>
  <li>
    <p>复盘是以学习为导向</p>
  </li>
  <li>
    <p>复盘通常是以团队的形式进行</p>
  </li>
</ul>

<h2 id="复盘vs总结">复盘VS总结</h2>

<blockquote>
  <p>“复盘并不是一个哗众取宠的词语，客观来说，总结只是复盘的一部分，复盘比总结更具有丰富的内涵。总结是对事件过程进行梳理，它是对已经发生的行为和结果进行描述、分析和归纳，它关注事件的关键点和里程碑。而复盘，除了包含总结的动作以外，它还会对未发生的行为进行虚拟探究，探索其他行为的可能性和可行性，以找到新的方法和出路。</p>

  <p>复盘，是在头脑中对做过的事情重新“过一遍”，探究和推演一些动作，使得我们对各种可能性及其不同后果进行审视和设计，就好比两个一流高手和绝顶高手切磋武艺，一流高手看到的是已发生的切磋中的招式进行的总结，而绝顶高手除了能看到对方对已知的理解，还会探究招式好的地方是好在哪里、下次我可以在哪些情况下再次使用；招式不好的地方不好在哪里，是可以怎么改进；或者换一种拳法去应对又会怎么样，导致后续变化与应对又是怎样，等等。</p>

  <p>因此简单来说，复盘是动态连续的、是立体化的，是包含已知事物的总结及未知的探究；而总结是静止跳跃的、是平面化的，更多的是对已发生的事物进行归纳。复盘的进化式过程，是加上执行实践的参照比对，从而排除错误的认识和路径，找到更有效、更符合本质规律的做法，确定哪些行为可以继续，哪些行为终止，帮助今后把事情做好、做对。也就是说，复盘是一个不断学习、总结、反思、提炼和持续提高的过程。”</p>

  <p>单纯的总结并不是复盘，复盘更像是一场路演，根据总结和可优化的点将项目再重头到位再“做”一遍，加深印象，因此才会更有效果。</p>
</blockquote>

<h1 id="二why">二、Why</h1>

<p>1、做事情无论成败，要通过复盘、搞清楚成败的原因，从中学到经验教训<br />
2、通过复盘来传承经验，提高能力<br />
3、不再犯同样的错误<br />
4、总结规律、固定流程</p>

<h1 id="三how">三、How</h1>

<h3 id="31复盘四步法">3.1、复盘四步法</h3>

<blockquote>
  <p><strong>1.回顾目标：</strong>当初的目的或期望的结果是什么？</p>

  <p><strong>2.评估结果：</strong>对照原来设定的目标，看看完成结果如何？过程有哪些亮点和不足？</p>

  <p><strong>3.分析原因：</strong>事情做成功的关键原因和失败的根本原因是什么？要考虑主观和客观两方面，要有系统性和深度。</p>

  <p><strong>4.总结经验：</strong>对得失有什么体会？能总结出哪些规律？未来的行动计划是什么？</p>
</blockquote>

<p><img src="https://pic1.zhimg.com/80/v2-8b98faad617fdf35d33f4ebf692dd1d2_720w.jpg?source=1940ef5c" alt="" /></p>

<h3 id="32复盘方法情境重现法和关键点法">3.2、复盘方法：情境重现法和关键点法</h3>

<p>所谓情境重现，除了重现当时的行为外，重要的就是要重现当时的信息场（流）、思维场（流）和情绪场（流）。只有重现了这三种场（流），一个情境才可以说是相对完整地重现了，一种行为才有了理解的前提和基础。</p>

<p>所谓<a href="https://www.zhihu.com/search?q=%E5%85%B3%E9%94%AE%E7%82%B9%E6%B3%95%E5%88%99&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1262430619%7D">关键点法则</a>，是说在复盘的过程中，通过首先确定复盘事件的关键点，然后围绕关键点进行重现、思考和推演的复盘方法。</p>

<h3 id="33总结经验分清是经验还是规律">3.3、总结经验：分清是经验还是规律</h3>

<p>复盘主要是针对具体事件的讨论，其得出的结论很可能具有局限性。可以通过以上四条原则进行判断：</p>

<ul>
  <li>复盘的结论是否排除了偶发性因素？是普遍性、还是个例或偶尔性？</li>
  <li>结论指向人，还是指向事？</li>
  <li>结论是否经过3次以上的连续追问：为什么？是涉及到一些根本性的问题，还是仅仪于具体事件、操作层面</li>
  <li>是否有类似事件的复盘结果，可以进行交叉验证的？</li>
</ul>

<h1 id="附xxx项目复盘">附：xxx项目复盘</h1>

<blockquote>
  <p>复盘负责人：</p>

  <h1 id="项目概述">项目概述</h1>

  <p>项目成员：</p>

  <h1 id="step1目标回顾">Step1：目标回顾</h1>

  <h2 id="1项目目标">1、项目目标：</h2>

  <ul>
    <li>1h内完成数据迁移；</li>
    <li>保障资产数据准确性；</li>
  </ul>

  <h2 id="2交付时间里程碑">2、交付时间：（里程碑）</h2>

  <table>
    <thead>
      <tr>
        <th> </th>
        <th> </th>
        <th> </th>
        <th> </th>
        <th> </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>序号</td>
        <td>里程碑</td>
        <td>预计完成日期</td>
        <td>进度</td>
        <td>说明​​</td>
      </tr>
      <tr>
        <td>1</td>
        <td>方案编写&amp;评审</td>
        <td> </td>
        <td>100%​</td>
        <td> </td>
      </tr>
      <tr>
        <td>2</td>
        <td>迁移程序开发</td>
        <td> </td>
        <td>100%</td>
        <td> </td>
      </tr>
      <tr>
        <td>​3</td>
        <td>迁移程序优化​</td>
        <td> </td>
        <td>100%​</td>
        <td>​</td>
      </tr>
      <tr>
        <td>​4</td>
        <td>存量迁移支持​</td>
        <td> </td>
        <td>100%</td>
        <td>​</td>
      </tr>
      <tr>
        <td>5</td>
        <td>数据删档导入1​</td>
        <td> </td>
        <td>100%</td>
        <td>删档→全量数据导入</td>
      </tr>
      <tr>
        <td>6</td>
        <td>修复bug​+增量迁移</td>
        <td> </td>
        <td>​-</td>
        <td>交付无bug的迁数程序（统一迁数&amp;后置业务迁移）​</td>
      </tr>
      <tr>
        <td>7</td>
        <td>数据校验工具​</td>
        <td> </td>
        <td>-​</td>
        <td>​</td>
      </tr>
      <tr>
        <td>​8</td>
        <td>数据删档导入2​</td>
        <td> </td>
        <td>-​​​</td>
        <td>​删档→全量数据导入​→数据验收​</td>
      </tr>
      <tr>
        <td>​9</td>
        <td>数据迁移（真实）​</td>
        <td> </td>
        <td>-​​​</td>
        <td>​数据存量迁移+增量迁移</td>
      </tr>
      <tr>
        <td>10​</td>
        <td>数据验收报告​</td>
        <td> </td>
        <td>-​​​</td>
        <td>每天输出数据验收报告</td>
      </tr>
      <tr>
        <td>​11</td>
        <td>后置业务迁移​</td>
        <td> </td>
        <td>-​​​</td>
        <td>​</td>
      </tr>
      <tr>
        <td>12</td>
        <td>数据验收</td>
        <td> </td>
        <td>-</td>
        <td>​​</td>
      </tr>
    </tbody>
  </table>

  <h2 id="3验收标准-">3、验收标准 ：</h2>

  <ul>
    <li>数据迁移当天1h内完成聚星异构数据迁移；</li>
    <li>资产数据无差异；</li>
  </ul>

  <h1 id="step2评价结果">Step2：评价结果</h1>

  <h2 id="1项目准时性">1、项目准时性</h2>

  <p>项目整体交付时间：xxx完成全量迁移，符合预期</p>

  <h2 id="2项目质量">2、项目质量</h2>

  <ul>
    <li><strong>迁移量级：</strong>完成70+数据表亿级数据迁移，覆盖xxx核心业务数据等；</li>
    <li><strong>迁移效率：</strong>完成5+数据迁移演练，服务优化、编排，30min完成线上核心数据迁移&amp;验收；</li>
    <li><strong>数据准确性：</strong>覆盖统一框架验数、业务后置脚本验数、资产对账、场景验收等，数据零差异；</li>
  </ul>

  <h2 id="3项目收益">3、项目收益</h2>

  <p>略；</p>

  <h2 id="4项目主要亮点或问题">4、项目主要亮点或问题</h2>

  <ul>
    <li><strong>数据准确率高：</strong>亿级异构数据迁移，核心 数据零差异；</li>
    <li><strong>迁移效率高：</strong>30min内完成核心数据迁移&amp;验收，超预期（预期1h+）；</li>
    <li><strong>准时交付：</strong>复杂的异构数据，交付时间倒排，保质保量交付：完成框架设计、编写、测试、迭代、演练等；</li>
  </ul>

  <h1 id="step3分析与推演">Step3：分析与推演</h1>

  <table>
    <thead>
      <tr>
        <th>亮点</th>
        <th>挑战</th>
        <th>原因分析</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>准时保质交付</td>
        <td>- 交付时间是根据迁服时间倒排<br />- 涉及70+业务数据表，场景复杂<br />- 未知因素较多，风险大</td>
        <td>- 明确方向，对齐技术方案<br /> - 确定正确的方向、技术方案、关键实施路径，然后核心成员对齐信息<br />-  快速迭代<br /> - 先搭建框架体系，小步快跑，持续迭代优化，问题逐步收敛后，项目逐步从无序到有序状态；<br />- 控制风险<br /> - 梳理风险项，明确风险承受范围，超出承受范围的指定兜底方案；</td>
      </tr>
      <tr>
        <td>迁移效率高</td>
        <td>- 亿级异构数据</td>
        <td>- 实践演练：模拟真实环境进行实操演练，发现问题，持续优化；</td>
      </tr>
      <tr>
        <td>数据准确率高,迁移数据无差异</td>
        <td>- 业务复杂，70+业务表- 亿级数据<br />- 迁移验收数据有限</td>
        <td>- 核心数据迁移有比较多的实践，如金钱迁移、仓库重构迁移、订单扩容迁移、业务迁移等等，积累了较为丰富的数据迁移经验；<br />- 用统一的技术手段解决数据迁移问题，技术挑战大，但整体迁移质量有保障；</td>
      </tr>
    </tbody>
  </table>

  <p>不足：</p>

  <ul>
    <li>环境成为瓶颈，影响业务测试验收</li>
    <li>版本管理待完善，优化的问题会重复出现</li>
  </ul>

  <h1 id="step4总结经验">Step4：总结经验</h1>

  <p><strong>1.平时注重积累总结</strong></p>

  <ul>
    <li>不积跬步无以至千里，平时要多进行技术实践总结；e.g. 直播有较多核心数据迁移实践，如金钱迁移、仓库重构迁移、订单扩容迁移、业务迁移等等，积累了较为丰富的数据迁移经验，这次酷酷数据迁移才有可能会有较高的完成度；</li>
  </ul>

  <p><strong>2.小步快跑，持续迭代</strong></p>

  <ul>
    <li>面对未知无序事情，先确定大体的方向即可搭建框架体系，先Run起来，小步快跑，持续迭代优化。这个过程中，未知的事情会逐步变的清晰，无序变的有序；</li>
    <li>如果等将所有未知的事情都弄清楚，看清局部细节再动手，可能会错失最佳时机；</li>
  </ul>

  <p><strong>3.控制风险</strong></p>

  <ul>
    <li>风险不一定是坏事情，风险和收益并存；e.g. 技术挑战大的，落地风险大，数据准确性较为可控；</li>
    <li>评估风险和风险承受范围，超出范围的做兜底方案；e.g. 前期业务迁数和统一迁数框架两套方案并存，业务迁数为统一迁数框架兜底；</li>
  </ul>

  <p><strong>4.实践出真知</strong></p>

  <ul>
    <li>到真实的环境去实践演练，通过实践迭代可以逐步逼近理论期望；e.g. 多次的迁数实战演练，迁移&amp;校验由半天降低至30min；</li>
  </ul>

  <p>复盘时间：2021-12-24</p>

  <p>复盘参与人：xxxx</p>
</blockquote>

<h1 id="参考文档">参考文档</h1>

<p><a href="http://zhige.me/2020/01/18/2020/01/%E5%A4%8D%E7%9B%98%EF%BC%9A%E8%87%AA%E6%88%91%E8%BF%9B%E5%8C%96%E5%BF%85%E5%A4%87%E7%9A%84%E6%8A%80%E8%83%BD/">复盘：自我进化必备的技能 </a></p>]]></content><author><name>DempeZheng</name></author><category term="成长" /><summary type="html"><![CDATA[总结]]></summary></entry></feed>